!function(l){function e(e){for(var t,n,i=e[0],a=e[1],r=e[2],s=0,o=[];s<i.length;s++)n=i[s],c[n]&&o.push(c[n][0]),c[n]=0;for(t in a)Object.prototype.hasOwnProperty.call(a,t)&&(l[t]=a[t]);for(p&&p(e);o.length;)o.shift()();return u.push.apply(u,r||[]),d()}function d(){for(var e,t=0;t<u.length;t++){for(var n=u[t],i=!0,a=1;a<n.length;a++){var r=n[a];0!==c[r]&&(i=!1)}i&&(u.splice(t--,1),e=s(s.s=n[0]))}return e}var n={},c={0:0},u=[];function s(e){if(n[e])return n[e].exports;var t=n[e]={i:e,l:!1,exports:{}};return l[e].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.m=l,s.c=n,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(n,i,function(e){return t[e]}.bind(null,i));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="";var t=window.webpackJsonp=window.webpackJsonp||[],i=t.push.bind(t);t.push=e,t=t.slice();for(var a=0;a<t.length;a++)e(t[a]);var p=i;u.push([2,1]),d()}([function(e,t,n){n(5)(n(6)),e.exports=window.Zepto},function(e,t,n){"use strict";n.r(t),n.d(t,"window",function(){return a}),n.d(t,"document",function(){return i});var i="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,a="undefined"==typeof window?{document:i,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window},function(e,t,n){"use strict";var i=r(n(3)),a=r(n(0));r(n(7)),r(n(8)),r(n(9)),r(n(10));function r(e){return e&&e.__esModule?e:{default:e}}n(11),n(12);var s=void 0;new i.default(".swiper-container",{direction:"vertical",on:{slideChangeTransitionEnd:function(){var e=this.activeIndex;(0,a.default)(".swiper-slide").eq(e).addClass("animate").siblings().removeClass("animate"),2===e&&(0,a.default)(".swiper-slide").eq(e).addClass("swiper-no-swiping"),2===this.previousIndex&&((0,a.default)(".swiper-slide").eq(2).find(".bear").attr("style",""),(0,a.default)(".animation-bear-box div").attr("style",""),(0,a.default)(".normal-card div").attr("style",""),(0,a.default)(".hit-card-box div").attr("style",""))}}});(0,a.default)(".loading").on("animationend",function(){(0,a.default)(this).fadeOut(100,function(){(0,a.default)(".welcome").addClass("animate")})}),setTimeout(function(){(0,a.default)(".loading").addClass("animate")},1e3),(0,a.default)(".welcome .rotate-btn-box").on("longTap",function(){(0,a.default)(".welcome .bear-box").css("animation","bearDisappear 1s forwards"),setTimeout(function(){(0,a.default)(".welcome").fadeOut(1e3),(0,a.default)(".page1").addClass("animate")},1e3)}),(0,a.default)(".swiper-slide").eq(2).click(function(){var e=this;(0,a.default)(this).children(".bear").css("animation","none");var t=0,n=this;s=setInterval(function(){(0,a.default)(e).find(".animation-bear-box").children().eq(t).show().siblings().hide(),(0,a.default)(".normal-card div").eq(t).css("animation","none"),(0,a.default)(".hit-card-box div").eq(t).css("opacity",1),2==t&&(clearInterval(s),(0,a.default)(".hit-card-box div").css("animation","bearDisappear 1.5s forwards"),setTimeout(function(){(0,a.default)(n).removeClass("swiper-no-swiping")},1500)),t++},1e3)}),(0,a.default)(".audioControl").on("click",function(){var e=document.querySelector("audio");e.paused?(e.play(),(0,a.default)(this).addClass("pause")):(e.pause(),(0,a.default)(this).removeClass("pause"))})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}(),f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},A=n(4),G=n(1);function m(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a={addClass:A.addClass,removeClass:A.removeClass,hasClass:A.hasClass,toggleClass:A.toggleClass,attr:A.attr,removeAttr:A.removeAttr,data:A.data,transform:A.transform,transition:A.transition,on:A.on,off:A.off,trigger:A.trigger,transitionEnd:A.transitionEnd,outerWidth:A.outerWidth,outerHeight:A.outerHeight,offset:A.offset,css:A.css,each:A.each,html:A.html,text:A.text,is:A.is,index:A.index,eq:A.eq,append:A.append,prepend:A.prepend,next:A.next,nextAll:A.nextAll,prev:A.prev,prevAll:A.prevAll,parent:A.parent,parents:A.parents,closest:A.closest,find:A.find,children:A.children,remove:A.remove,add:A.add,styles:A.styles};Object.keys(a).forEach(function(e){A.$.fn[e]=a[e]});var r,s,o,R={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"x",n=void 0,i=void 0,a=void 0,r=G.window.getComputedStyle(e,null);return G.window.WebKitCSSMatrix?(6<(i=r.transform||r.webkitTransform).split(",").length&&(i=i.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),a=new G.window.WebKitCSSMatrix("none"===i?"":i)):n=(a=r.MozTransform||r.OTransform||r.MsTransform||r.msTransform||r.transform||r.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=G.window.WebKitCSSMatrix?a.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(i=G.window.WebKitCSSMatrix?a.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),i||0},parseUrlQuery:function(e){var t={},n=e||G.window.location.href,i=void 0,a=void 0,r=void 0,s=void 0;if("string"==typeof n&&n.length)for(s=(a=(n=-1<n.indexOf("?")?n.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,i=0;i<s;i+=1)r=a[i].replace(/#\S+/g,"").split("="),t[decodeURIComponent(r[0])]=void 0===r[1]?void 0:decodeURIComponent(r[1])||"";return t},isObject:function(e){return"object"===(void 0===e?"undefined":f(e))&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=Object(arguments.length<=0?void 0:arguments[0]),t=1;t<arguments.length;t+=1){var n=arguments.length<=t?void 0:arguments[t];if(null!=n)for(var i=Object.keys(Object(n)),a=0,r=i.length;a<r;a+=1){var s=i[a],o=Object.getOwnPropertyDescriptor(n,s);void 0!==o&&o.enumerable&&(R.isObject(e[s])&&R.isObject(n[s])?R.extend(e[s],n[s]):!R.isObject(e[s])&&R.isObject(n[s])?(e[s]={},R.extend(e[s],n[s])):e[s]=n[s])}}return e}},V=(o=G.document.createElement("div"),{touch:G.window.Modernizr&&!0===G.window.Modernizr.touch||!!(0<G.window.navigator.maxTouchPoints||"ontouchstart"in G.window||G.window.DocumentTouch&&G.document instanceof G.window.DocumentTouch),pointerEvents:!!(G.window.navigator.pointerEnabled||G.window.PointerEvent||"maxTouchPoints"in G.window.navigator),prefixedPointerEvents:!!G.window.navigator.msPointerEnabled,transition:(s=o.style,"transition"in s||"webkitTransition"in s||"MozTransition"in s),transforms3d:G.window.Modernizr&&!0===G.window.Modernizr.csstransforms3d||(r=o.style,"webkitPerspective"in r||"MozPerspective"in r||"OPerspective"in r||"MsPerspective"in r||"perspective"in r),flexbox:function(){for(var e=o.style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),n=0;n<t.length;n+=1)if(t[n]in e)return!0;return!1}(),observer:"MutationObserver"in G.window||"WebkitMutationObserver"in G.window,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});G.window.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in G.window}),l=function(){function n(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};v(this,n);var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})}return i(n,[{key:"on",value:function(e,t,n){var i=this;if("function"!=typeof t)return i;var a=n?"unshift":"push";return e.split(" ").forEach(function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][a](t)}),i}},{key:"once",value:function(a,r,e){var s=this;if("function"!=typeof r)return s;return s.on(a,function e(){for(var t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];r.apply(s,n),s.off(a,e)},e)}},{key:"off",value:function(e,i){var a=this;return a.eventsListeners&&e.split(" ").forEach(function(n){void 0===i?a.eventsListeners[n]=[]:a.eventsListeners[n]&&a.eventsListeners[n].length&&a.eventsListeners[n].forEach(function(e,t){e===i&&a.eventsListeners[n].splice(t,1)})}),a}},{key:"emit",value:function(){var n=this;if(!n.eventsListeners)return n;for(var e=void 0,i=void 0,a=void 0,t=arguments.length,r=Array(t),s=0;s<t;s++)r[s]=arguments[s];return a="string"==typeof r[0]||Array.isArray(r[0])?(e=r[0],i=r.slice(1,r.length),n):(e=r[0].events,i=r[0].data,r[0].context||n),(Array.isArray(e)?e:e.split(" ")).forEach(function(e){if(n.eventsListeners&&n.eventsListeners[e]){var t=[];n.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(a,i)})}}),n}},{key:"useModulesParams",value:function(n){var i=this;i.modules&&Object.keys(i.modules).forEach(function(e){var t=i.modules[e];t.params&&R.extend(n,t.params)})}},{key:"useModules",value:function(){var i=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},a=this;a.modules&&Object.keys(a.modules).forEach(function(e){var n=a.modules[e],t=i[e]||{};n.instance&&Object.keys(n.instance).forEach(function(e){var t=n.instance[e];a[e]="function"==typeof t?t.bind(a):t}),n.on&&a.on&&Object.keys(n.on).forEach(function(e){a.on(e,n.on[e])}),n.create&&n.create.bind(a)(t)})}}],[{key:"installModule",value:function(t){var n=this;n.prototype.modules||(n.prototype.modules={});var e=t.name||Object.keys(n.prototype.modules).length+"_"+R.now();if((n.prototype.modules[e]=t).proto&&Object.keys(t.proto).forEach(function(e){n.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){n[e]=t.static[e]}),t.install){for(var i=arguments.length,a=Array(1<i?i-1:0),r=1;r<i;r++)a[r-1]=arguments[r];t.install.apply(n,a)}return n}},{key:"use",value:function(e){var t=this;if(Array.isArray(e))return e.forEach(function(e){return t.installModule(e)}),t;for(var n=arguments.length,i=Array(1<n?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];return t.installModule.apply(t,[e].concat(i))}},{key:"components",set:function(e){this.use&&this.use(e)}}]),n}();var d={updateSize:function(){var e=this,t=void 0,n=void 0,i=e.$el;t=void 0!==e.params.width?e.params.width:i[0].clientWidth,n=void 0!==e.params.height?e.params.height:i[0].clientHeight,0===t&&e.isHorizontal()||0===n&&e.isVertical()||(t=t-parseInt(i.css("padding-left"),10)-parseInt(i.css("padding-right"),10),n=n-parseInt(i.css("padding-top"),10)-parseInt(i.css("padding-bottom"),10),R.extend(e,{width:t,height:n,size:e.isHorizontal()?t:n}))},updateSlides:function(){var e=this,t=e.params,n=e.$wrapperEl,i=e.size,a=e.rtlTranslate,r=e.wrongRTL,s=e.virtual&&t.virtual.enabled,o=s?e.virtual.slides.length:e.slides.length,l=n.children("."+e.params.slideClass),d=s?e.virtual.slides.length:l.length,c=[],u=[],p=[],h=t.slidesOffsetBefore;"function"==typeof h&&(h=t.slidesOffsetBefore.call(e));var f=t.slidesOffsetAfter;"function"==typeof f&&(f=t.slidesOffsetAfter.call(e));var m=e.snapGrid.length,v=e.snapGrid.length,g=t.spaceBetween,y=-h,b=0,w=0;if(void 0!==i){"string"==typeof g&&0<=g.indexOf("%")&&(g=parseFloat(g.replace("%",""))/100*i),e.virtualSize=-g,a?l.css({marginLeft:"",marginTop:""}):l.css({marginRight:"",marginBottom:""});var x=void 0;1<t.slidesPerColumn&&(x=Math.floor(d/t.slidesPerColumn)===d/e.params.slidesPerColumn?d:Math.ceil(d/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(x=Math.max(x,t.slidesPerView*t.slidesPerColumn)));for(var T=void 0,E=t.slidesPerColumn,S=x/E,C=Math.floor(d/t.slidesPerColumn),$=0;$<d;$+=1){T=0;var k=l.eq($);if(1<t.slidesPerColumn){var M=void 0,P=void 0,z=void 0;"column"===t.slidesPerColumnFill?(z=$-(P=Math.floor($/E))*E,(C<P||P===C&&z===E-1)&&E<=(z+=1)&&(z=0,P+=1),M=P+z*x/E,k.css({"-webkit-box-ordinal-group":M,"-moz-box-ordinal-group":M,"-ms-flex-order":M,"-webkit-order":M,order:M})):P=$-(z=Math.floor($/S))*S,k.css("margin-"+(e.isHorizontal()?"top":"left"),0!==z&&t.spaceBetween&&t.spaceBetween+"px").attr("data-swiper-column",P).attr("data-swiper-row",z)}if("none"!==k.css("display")){if("auto"===t.slidesPerView){var A=G.window.getComputedStyle(k[0],null),I=k[0].style.transform,L=k[0].style.webkitTransform;I&&(k[0].style.transform="none"),L&&(k[0].style.webkitTransform="none"),T=t.roundLengths?e.isHorizontal()?k.outerWidth(!0):k.outerHeight(!0):e.isHorizontal()?parseFloat(A.getPropertyValue("width"))+parseFloat(A.getPropertyValue("padding-left"))+parseFloat(A.getPropertyValue("padding-right"))+parseFloat(A.getPropertyValue("margin-left"))+parseFloat(A.getPropertyValue("margin-right")):parseFloat(A.getPropertyValue("height"))+parseFloat(A.getPropertyValue("padding-top"))+parseFloat(A.getPropertyValue("padding-bottom"))+parseFloat(A.getPropertyValue("margin-top"))+parseFloat(A.getPropertyValue("margin-bottom")),I&&(k[0].style.transform=I),L&&(k[0].style.webkitTransform=L),t.roundLengths&&(T=Math.floor(T))}else T=(i-(t.slidesPerView-1)*g)/t.slidesPerView,t.roundLengths&&(T=Math.floor(T)),l[$]&&(e.isHorizontal()?l[$].style.width=T+"px":l[$].style.height=T+"px");l[$]&&(l[$].swiperSlideSize=T),p.push(T),t.centeredSlides?(y=y+T/2+b/2+g,0===b&&0!==$&&(y=y-i/2-g),0===$&&(y=y-i/2-g),Math.abs(y)<.001&&(y=0),t.roundLengths&&(y=Math.floor(y)),w%t.slidesPerGroup==0&&c.push(y),u.push(y)):(t.roundLengths&&(y=Math.floor(y)),w%t.slidesPerGroup==0&&c.push(y),u.push(y),y=y+T+g),e.virtualSize+=T+g,b=T,w+=1}}e.virtualSize=Math.max(e.virtualSize,i)+f;var O=void 0;if(a&&r&&("slide"===t.effect||"coverflow"===t.effect)&&n.css({width:e.virtualSize+t.spaceBetween+"px"}),V.flexbox&&!t.setWrapperSize||(e.isHorizontal()?n.css({width:e.virtualSize+t.spaceBetween+"px"}):n.css({height:e.virtualSize+t.spaceBetween+"px"})),1<t.slidesPerColumn&&(e.virtualSize=(T+t.spaceBetween)*x,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?n.css({width:e.virtualSize+t.spaceBetween+"px"}):n.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){O=[];for(var D=0;D<c.length;D+=1){var j=c[D];t.roundLengths&&(j=Math.floor(j)),c[D]<e.virtualSize+c[0]&&O.push(j)}c=O}if(!t.centeredSlides){O=[];for(var N=0;N<c.length;N+=1){var H=c[N];t.roundLengths&&(H=Math.floor(H)),c[N]<=e.virtualSize-i&&O.push(H)}c=O,1<Math.floor(e.virtualSize-i)-Math.floor(c[c.length-1])&&c.push(e.virtualSize-i)}if(0===c.length&&(c=[0]),0!==t.spaceBetween&&(e.isHorizontal()?a?l.css({marginLeft:g+"px"}):l.css({marginRight:g+"px"}):l.css({marginBottom:g+"px"})),t.centerInsufficientSlides){var F=0;if(p.forEach(function(e){F+=e+(t.spaceBetween?t.spaceBetween:0)}),(F-=t.spaceBetween)<i){var B=(i-F)/2;c.forEach(function(e,t){c[t]=e-B}),u.forEach(function(e,t){u[t]=e+B})}}R.extend(e,{slides:l,snapGrid:c,slidesGrid:u,slidesSizesGrid:p}),d!==o&&e.emit("slidesLengthChange"),c.length!==m&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),u.length!==v&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t=this,n=[],i=0,a=void 0;if("number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed),"auto"!==t.params.slidesPerView&&1<t.params.slidesPerView)for(a=0;a<Math.ceil(t.params.slidesPerView);a+=1){var r=t.activeIndex+a;if(r>t.slides.length)break;n.push(t.slides.eq(r)[0])}else n.push(t.slides.eq(t.activeIndex)[0]);for(a=0;a<n.length;a+=1)if(void 0!==n[a]){var s=n[a].offsetHeight;i=i<s?s:i}i&&t.$wrapperEl.css("height",i+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this&&this.translate||0,t=this,n=t.params,i=t.slides,a=t.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();var r=-e;a&&(r=e),i.removeClass(n.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var s=0;s<i.length;s+=1){var o=i[s],l=(r+(n.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+n.spaceBetween);if(n.watchSlidesVisibility){var d=-(r-o.swiperSlideOffset),c=d+t.slidesSizesGrid[s];(0<=d&&d<t.size||0<c&&c<=t.size||d<=0&&c>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(s),i.eq(s).addClass(n.slideVisibleClass))}o.progress=a?-l:l}t.visibleSlides=(0,A.$)(t.visibleSlides)}},updateProgress:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this&&this.translate||0,t=this,n=t.params,i=t.maxTranslate()-t.minTranslate(),a=t.progress,r=t.isBeginning,s=t.isEnd,o=r,l=s;s=0===i?r=!(a=0):(r=(a=(e-t.minTranslate())/i)<=0,1<=a),R.extend(t,{progress:a,isBeginning:r,isEnd:s}),(n.watchSlidesProgress||n.watchSlidesVisibility)&&t.updateSlidesProgress(e),r&&!o&&t.emit("reachBeginning toEdge"),s&&!l&&t.emit("reachEnd toEdge"),(o&&!r||l&&!s)&&t.emit("fromEdge"),t.emit("progress",a)},updateSlidesClasses:function(){var e=this,t=e.slides,n=e.params,i=e.$wrapperEl,a=e.activeIndex,r=e.realIndex,s=e.virtual&&n.virtual.enabled;t.removeClass(n.slideActiveClass+" "+n.slideNextClass+" "+n.slidePrevClass+" "+n.slideDuplicateActiveClass+" "+n.slideDuplicateNextClass+" "+n.slideDuplicatePrevClass);var o=void 0;(o=s?e.$wrapperEl.find("."+n.slideClass+'[data-swiper-slide-index="'+a+'"]'):t.eq(a)).addClass(n.slideActiveClass),n.loop&&(o.hasClass(n.slideDuplicateClass)?i.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+r+'"]').addClass(n.slideDuplicateActiveClass):i.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+r+'"]').addClass(n.slideDuplicateActiveClass));var l=o.nextAll("."+n.slideClass).eq(0).addClass(n.slideNextClass);n.loop&&0===l.length&&(l=t.eq(0)).addClass(n.slideNextClass);var d=o.prevAll("."+n.slideClass).eq(0).addClass(n.slidePrevClass);n.loop&&0===d.length&&(d=t.eq(-1)).addClass(n.slidePrevClass),n.loop&&(l.hasClass(n.slideDuplicateClass)?i.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass):i.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass),d.hasClass(n.slideDuplicateClass)?i.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass):i.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t=this,n=t.rtlTranslate?t.translate:-t.translate,i=t.slidesGrid,a=t.snapGrid,r=t.params,s=t.activeIndex,o=t.realIndex,l=t.snapIndex,d=e,c=void 0;if(void 0===d){for(var u=0;u<i.length;u+=1)void 0!==i[u+1]?n>=i[u]&&n<i[u+1]-(i[u+1]-i[u])/2?d=u:n>=i[u]&&n<i[u+1]&&(d=u+1):n>=i[u]&&(d=u);r.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}if((c=0<=a.indexOf(n)?a.indexOf(n):Math.floor(d/r.slidesPerGroup))>=a.length&&(c=a.length-1),d!==s){var p=parseInt(t.slides.eq(d).attr("data-swiper-slide-index")||d,10);R.extend(t,{snapIndex:c,realIndex:p,previousIndex:s,activeIndex:d}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),o!==p&&t.emit("realIndexChange"),t.emit("slideChange")}else c!==l&&(t.snapIndex=c,t.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,n=t.params,i=(0,A.$)(e.target).closest("."+n.slideClass)[0],a=!1;if(i)for(var r=0;r<t.slides.length;r+=1)t.slides[r]===i&&(a=!0);if(!i||!a)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=i,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt((0,A.$)(i).attr("data-swiper-slide-index"),10):t.clickedIndex=(0,A.$)(i).index(),n.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var c={getTranslate:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.isHorizontal()?"x":"y",t=this.params,n=this.rtlTranslate,i=this.translate,a=this.$wrapperEl;if(t.virtualTranslate)return n?-i:i;var r=R.getTranslate(a[0],e);return n&&(r=-r),r||0},setTranslate:function(e,t){var n=this,i=n.rtlTranslate,a=n.params,r=n.$wrapperEl,s=n.progress,o=0,l=0;n.isHorizontal()?o=i?-e:e:l=e,a.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),a.virtualTranslate||(V.transforms3d?r.transform("translate3d("+o+"px, "+l+"px, 0px)"):r.transform("translate("+o+"px, "+l+"px)")),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?o:l;var d=n.maxTranslate()-n.minTranslate();(0===d?0:(e-n.minTranslate())/d)!==s&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}};var u={setTransition:function(e,t){this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(){var e=!(0<arguments.length&&void 0!==arguments[0])||arguments[0],t=arguments[1],n=this,i=n.activeIndex,a=n.params,r=n.previousIndex;a.autoHeight&&n.updateAutoHeight();var s=t;if(s||(s=r<i?"next":i<r?"prev":"reset"),n.emit("transitionStart"),e&&i!==r){if("reset"===s)return void n.emit("slideResetTransitionStart");n.emit("slideChangeTransitionStart"),"next"===s?n.emit("slideNextTransitionStart"):n.emit("slidePrevTransitionStart")}},transitionEnd:function(){var e=!(0<arguments.length&&void 0!==arguments[0])||arguments[0],t=arguments[1],n=this,i=n.activeIndex,a=n.previousIndex;n.animating=!1,n.setTransition(0);var r=t;if(r||(r=a<i?"next":i<a?"prev":"reset"),n.emit("transitionEnd"),e&&i!==a){if("reset"===r)return void n.emit("slideResetTransitionEnd");n.emit("slideChangeTransitionEnd"),"next"===r?n.emit("slideNextTransitionEnd"):n.emit("slidePrevTransitionEnd")}}};var p={slideTo:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.params.speed,n=!(2<arguments.length&&void 0!==arguments[2])||arguments[2],i=arguments[3],a=this,r=e;r<0&&(r=0);var s=a.params,o=a.snapGrid,l=a.slidesGrid,d=a.previousIndex,c=a.activeIndex,u=a.rtlTranslate;if(a.animating&&s.preventInteractionOnTransition)return!1;var p=Math.floor(r/s.slidesPerGroup);p>=o.length&&(p=o.length-1),(c||s.initialSlide||0)===(d||0)&&n&&a.emit("beforeSlideChangeStart");var h=-o[p];if(a.updateProgress(h),s.normalizeSlideIndex)for(var f=0;f<l.length;f+=1)-Math.floor(100*h)>=Math.floor(100*l[f])&&(r=f);if(a.initialized&&r!==c){if(!a.allowSlideNext&&h<a.translate&&h<a.minTranslate())return!1;if(!a.allowSlidePrev&&h>a.translate&&h>a.maxTranslate()&&(c||0)!==r)return!1}var m=void 0;return m=c<r?"next":r<c?"prev":"reset",u&&-h===a.translate||!u&&h===a.translate?(a.updateActiveIndex(r),s.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==s.effect&&a.setTranslate(h),"reset"!==m&&(a.transitionStart(n,m),a.transitionEnd(n,m)),!1):(0!==t&&V.transition?(a.setTransition(t),a.setTranslate(h),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,i),a.transitionStart(n,m),a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(n,m))}),a.$wrapperEl[0].addEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd))):(a.setTransition(0),a.setTranslate(h),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,i),a.transitionStart(n,m),a.transitionEnd(n,m)),!0)},slideToLoop:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.params.speed,n=!(2<arguments.length&&void 0!==arguments[2])||arguments[2],i=arguments[3],a=e;return this.params.loop&&(a+=this.loopedSlides),this.slideTo(a,t,n,i)},slideNext:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.params.speed,t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=arguments[2],i=this,a=i.params,r=i.animating;return a.loop?!r&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,i.slideTo(i.activeIndex+a.slidesPerGroup,e,t,n)):i.slideTo(i.activeIndex+a.slidesPerGroup,e,t,n)},slidePrev:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.params.speed,t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=arguments[2],i=this,a=i.params,r=i.animating,s=i.snapGrid,o=i.slidesGrid,l=i.rtlTranslate;if(a.loop){if(r)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var c=d(l?i.translate:-i.translate),u=s.map(function(e){return d(e)}),p=(o.map(function(e){return d(e)}),s[u.indexOf(c)],s[u.indexOf(c)-1]),h=void 0;return void 0!==p&&(h=o.indexOf(p))<0&&(h=i.activeIndex-1),i.slideTo(h,e,t,n)},slideReset:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.params.speed,t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=arguments[2];return this.slideTo(this.activeIndex,e,t,n)},slideToClosest:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.params.speed,t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=arguments[2],i=this,a=i.activeIndex,r=Math.floor(a/i.params.slidesPerGroup);if(r<i.snapGrid.length-1){var s=i.rtlTranslate?i.translate:-i.translate,o=i.snapGrid[r];(i.snapGrid[r+1]-o)/2<s-o&&(a=i.params.slidesPerGroup)}return i.slideTo(a,e,t,n)},slideToClickedSlide:function(){var e=this,t=e.params,n=e.$wrapperEl,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView,a=e.clickedIndex,r=void 0;if(t.loop){if(e.animating)return;r=parseInt((0,A.$)(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?a<e.loopedSlides-i/2||a>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),a=n.children("."+t.slideClass+'[data-swiper-slide-index="'+r+'"]:not(.'+t.slideDuplicateClass+")").eq(0).index(),R.nextTick(function(){e.slideTo(a)})):e.slideTo(a):a>e.slides.length-i?(e.loopFix(),a=n.children("."+t.slideClass+'[data-swiper-slide-index="'+r+'"]:not(.'+t.slideDuplicateClass+")").eq(0).index(),R.nextTick(function(){e.slideTo(a)})):e.slideTo(a)}else e.slideTo(a)}};var h={loopCreate:function(){var i=this,e=i.params,t=i.$wrapperEl;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var a=t.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var n=e.slidesPerGroup-a.length%e.slidesPerGroup;if(n!==e.slidesPerGroup){for(var r=0;r<n;r+=1){var s=(0,A.$)(G.document.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);t.append(s)}a=t.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=a.length),i.loopedSlides=parseInt(e.loopedSlides||e.slidesPerView,10),i.loopedSlides+=e.loopAdditionalSlides,i.loopedSlides>a.length&&(i.loopedSlides=a.length);var o=[],l=[];a.each(function(e,t){var n=(0,A.$)(t);e<i.loopedSlides&&l.push(t),e<a.length&&e>=a.length-i.loopedSlides&&o.push(t),n.attr("data-swiper-slide-index",e)});for(var d=0;d<l.length;d+=1)t.append((0,A.$)(l[d].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var c=o.length-1;0<=c;c-=1)t.prepend((0,A.$)(o[c].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){var e=this,t=e.params,n=e.activeIndex,i=e.slides,a=e.loopedSlides,r=e.allowSlidePrev,s=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate,d=void 0;e.allowSlidePrev=!0,e.allowSlideNext=!0;var c=-o[n]-e.getTranslate();n<a?(d=i.length-3*a+n,d+=a,e.slideTo(d,0,!1,!0)&&0!==c&&e.setTranslate((l?-e.translate:e.translate)-c)):("auto"===t.slidesPerView&&2*a<=n||n>=i.length-a)&&(d=-i.length+n+a,d+=a,e.slideTo(d,0,!1,!0)&&0!==c&&e.setTranslate((l?-e.translate:e.translate)-c));e.allowSlidePrev=r,e.allowSlideNext=s},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,n=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),n.removeAttr("data-swiper-slide-index")}};var g={setGrabCursor:function(e){if(!(V.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked)){var t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){V.touch||this.params.watchOverflow&&this.isLocked||(this.el.style.cursor="")}};var y={appendSlide:function(e){var t=this,n=t.$wrapperEl,i=t.params;if(i.loop&&t.loopDestroy(),"object"===(void 0===e?"undefined":f(e))&&"length"in e)for(var a=0;a<e.length;a+=1)e[a]&&n.append(e[a]);else n.append(e);i.loop&&t.loopCreate(),i.observer&&V.observer||t.update()},prependSlide:function(e){var t=this,n=t.params,i=t.$wrapperEl,a=t.activeIndex;n.loop&&t.loopDestroy();var r=a+1;if("object"===(void 0===e?"undefined":f(e))&&"length"in e){for(var s=0;s<e.length;s+=1)e[s]&&i.prepend(e[s]);r=a+e.length}else i.prepend(e);n.loop&&t.loopCreate(),n.observer&&V.observer||t.update(),t.slideTo(r,0,!1)},addSlide:function(e,t){var n=this,i=n.$wrapperEl,a=n.params,r=n.activeIndex;a.loop&&(r-=n.loopedSlides,n.loopDestroy(),n.slides=i.children("."+a.slideClass));var s=n.slides.length;if(e<=0)n.prependSlide(t);else if(s<=e)n.appendSlide(t);else{for(var o=e<r?r+1:r,l=[],d=s-1;e<=d;d-=1){var c=n.slides.eq(d);c.remove(),l.unshift(c)}if("object"===(void 0===t?"undefined":f(t))&&"length"in t){for(var u=0;u<t.length;u+=1)t[u]&&i.append(t[u]);o=e<r?r+t.length:r}else i.append(t);for(var p=0;p<l.length;p+=1)i.append(l[p]);a.loop&&n.loopCreate(),a.observer&&V.observer||n.update(),a.loop?n.slideTo(o+n.loopedSlides,0,!1):n.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,n=t.params,i=t.$wrapperEl,a=t.activeIndex;n.loop&&(a-=t.loopedSlides,t.loopDestroy(),t.slides=i.children("."+n.slideClass));var r=a,s=void 0;if("object"===(void 0===e?"undefined":f(e))&&"length"in e){for(var o=0;o<e.length;o+=1)s=e[o],t.slides[s]&&t.slides.eq(s).remove(),s<r&&(r-=1);r=Math.max(r,0)}else s=e,t.slides[s]&&t.slides.eq(s).remove(),s<r&&(r-=1),r=Math.max(r,0);n.loop&&t.loopCreate(),n.observer&&V.observer||t.update(),n.loop?t.slideTo(r+t.loopedSlides,0,!1):t.slideTo(r,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},b=function(){var e=G.window.navigator.userAgent,t={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:G.window.cordova||G.window.phonegap,phonegap:G.window.cordova||G.window.phonegap},n=e.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),i=e.match(/(Android);?[\s\/]+([\d.]+)?/),a=e.match(/(iPad).*OS\s([\d_]+)/),r=e.match(/(iPod)(.*OS\s([\d_]+))?/),s=!a&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);if(n&&(t.os="windows",t.osVersion=n[2],t.windows=!0),i&&!n&&(t.os="android",t.osVersion=i[2],t.android=!0,t.androidChrome=0<=e.toLowerCase().indexOf("chrome")),(a||s||r)&&(t.os="ios",t.ios=!0),s&&!r&&(t.osVersion=s[2].replace(/_/g,"."),t.iphone=!0),a&&(t.osVersion=a[2].replace(/_/g,"."),t.ipad=!0),r&&(t.osVersion=r[3]?r[3].replace(/_/g,"."):null,t.iphone=!0),t.ios&&t.osVersion&&0<=e.indexOf("Version/")&&"10"===t.osVersion.split(".")[0]&&(t.osVersion=e.toLowerCase().split("version/")[1].split(" ")[0]),t.desktop=!(t.os||t.android||t.webView),t.webView=(s||a||r)&&e.match(/.*AppleWebKit(?!.*Safari)/i),t.os&&"ios"===t.os){var o=t.osVersion.split("."),l=G.document.querySelector('meta[name="viewport"]');t.minimalUi=!t.webView&&(r||s)&&(1*o[0]==7?1<=1*o[1]:7<1*o[0])&&l&&0<=l.getAttribute("content").indexOf("minimal-ui")}return t.pixelRatio=G.window.devicePixelRatio||1,t}();function w(){var e=this,t=e.params,n=e.el;if(!n||0!==n.offsetWidth){t.breakpoints&&e.setBreakpoint();var i=e.allowSlideNext,a=e.allowSlidePrev,r=e.snapGrid;if(e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),t.freeMode){var s=Math.min(Math.max(e.translate,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses(),t.autoHeight&&e.updateAutoHeight()}else e.updateSlidesClasses(),("auto"===t.slidesPerView||1<t.slidesPerView)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0);e.allowSlidePrev=a,e.allowSlideNext=i,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}}var x={attachEvents:function(){var e=this,t=e.params,n=e.touchEvents,i=e.el,a=e.wrapperEl;e.onTouchStart=function(e){var t=this,n=t.touchEventsData,i=t.params,a=t.touches;if(!t.animating||!i.preventInteractionOnTransition){var r=e;if(r.originalEvent&&(r=r.originalEvent),n.isTouchEvent="touchstart"===r.type,(n.isTouchEvent||!("which"in r)||3!==r.which)&&!(!n.isTouchEvent&&"button"in r&&0<r.button||n.isTouched&&n.isMoved))if(i.noSwiping&&(0,A.$)(r.target).closest(i.noSwipingSelector?i.noSwipingSelector:"."+i.noSwipingClass)[0])t.allowClick=!0;else if(!i.swipeHandler||(0,A.$)(r).closest(i.swipeHandler)[0]){a.currentX="touchstart"===r.type?r.targetTouches[0].pageX:r.pageX,a.currentY="touchstart"===r.type?r.targetTouches[0].pageY:r.pageY;var s=a.currentX,o=a.currentY,l=i.edgeSwipeDetection||i.iOSEdgeSwipeDetection,d=i.edgeSwipeThreshold||i.iOSEdgeSwipeThreshold;if(!l||!(s<=d||s>=G.window.screen.width-d)){if(R.extend(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=s,a.startY=o,n.touchStartTime=R.now(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,0<i.threshold&&(n.allowThresholdMove=!1),"touchstart"!==r.type){var c=!0;(0,A.$)(r.target).is(n.formElements)&&(c=!1),G.document.activeElement&&(0,A.$)(G.document.activeElement).is(n.formElements)&&G.document.activeElement!==r.target&&G.document.activeElement.blur();var u=c&&t.allowTouchMove&&i.touchStartPreventDefault;(i.touchStartForcePreventDefault||u)&&r.preventDefault()}t.emit("touchStart",r)}}}}.bind(e),e.onTouchMove=function(e){var t=this,n=t.touchEventsData,i=t.params,a=t.touches,r=t.rtlTranslate,s=e;if(s.originalEvent&&(s=s.originalEvent),n.isTouched){if(!n.isTouchEvent||"mousemove"!==s.type){var o="touchmove"===s.type?s.targetTouches[0].pageX:s.pageX,l="touchmove"===s.type?s.targetTouches[0].pageY:s.pageY;if(s.preventedByNestedSwiper)return a.startX=o,void(a.startY=l);if(!t.allowTouchMove)return t.allowClick=!1,void(n.isTouched&&(R.extend(a,{startX:o,startY:l,currentX:o,currentY:l}),n.touchStartTime=R.now()));if(n.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(t.isVertical()){if(l<a.startY&&t.translate<=t.maxTranslate()||l>a.startY&&t.translate>=t.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(o<a.startX&&t.translate<=t.maxTranslate()||o>a.startX&&t.translate>=t.minTranslate())return;if(n.isTouchEvent&&G.document.activeElement&&s.target===G.document.activeElement&&(0,A.$)(s.target).is(n.formElements))return n.isMoved=!0,void(t.allowClick=!1);if(n.allowTouchCallbacks&&t.emit("touchMove",s),!(s.targetTouches&&1<s.targetTouches.length)){a.currentX=o,a.currentY=l;var d=a.currentX-a.startX,c=a.currentY-a.startY;if(!(t.params.threshold&&Math.sqrt(Math.pow(d,2)+Math.pow(c,2))<t.params.threshold)){if(void 0===n.isScrolling){var u=void 0;t.isHorizontal()&&a.currentY===a.startY||t.isVertical()&&a.currentX===a.startX?n.isScrolling=!1:25<=d*d+c*c&&(u=180*Math.atan2(Math.abs(c),Math.abs(d))/Math.PI,n.isScrolling=t.isHorizontal()?u>i.touchAngle:90-u>i.touchAngle)}if(n.isScrolling&&t.emit("touchMoveOpposite",s),void 0===n.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(n.startMoving=!0)),n.isScrolling)n.isTouched=!1;else if(n.startMoving){t.allowClick=!1,s.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&s.stopPropagation(),n.isMoved||(i.loop&&t.loopFix(),n.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),n.allowMomentumBounce=!1,!i.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",s)),t.emit("sliderMove",s),n.isMoved=!0;var p=t.isHorizontal()?d:c;a.diff=p,p*=i.touchRatio,r&&(p=-p),t.swipeDirection=0<p?"prev":"next",n.currentTranslate=p+n.startTranslate;var h=!0,f=i.resistanceRatio;if(i.touchReleaseOnEdges&&(f=0),0<p&&n.currentTranslate>t.minTranslate()?(h=!1,i.resistance&&(n.currentTranslate=t.minTranslate()-1+Math.pow(-t.minTranslate()+n.startTranslate+p,f))):p<0&&n.currentTranslate<t.maxTranslate()&&(h=!1,i.resistance&&(n.currentTranslate=t.maxTranslate()+1-Math.pow(t.maxTranslate()-n.startTranslate-p,f))),h&&(s.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),0<i.threshold){if(!(Math.abs(p)>i.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,n.currentTranslate=n.startTranslate,void(a.diff=t.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}i.followFinger&&((i.freeMode||i.watchSlidesProgress||i.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),i.freeMode&&(0===n.velocities.length&&n.velocities.push({position:a[t.isHorizontal()?"startX":"startY"],time:n.touchStartTime}),n.velocities.push({position:a[t.isHorizontal()?"currentX":"currentY"],time:R.now()})),t.updateProgress(n.currentTranslate),t.setTranslate(n.currentTranslate))}}}}}else n.startMoving&&n.isScrolling&&t.emit("touchMoveOpposite",s)}.bind(e),e.onTouchEnd=function(e){var t=this,n=t.touchEventsData,i=t.params,a=t.touches,r=t.rtlTranslate,s=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),n.allowTouchCallbacks&&t.emit("touchEnd",d),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&i.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);i.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var c=R.now(),u=c-n.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap",d),u<300&&300<c-n.lastClickTime&&(n.clickTimeout&&clearTimeout(n.clickTimeout),n.clickTimeout=R.nextTick(function(){t&&!t.destroyed&&t.emit("click",d)},300)),u<300&&c-n.lastClickTime<300&&(n.clickTimeout&&clearTimeout(n.clickTimeout),t.emit("doubleTap",d))),n.lastClickTime=R.now(),R.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!n.isTouched||!n.isMoved||!t.swipeDirection||0===a.diff||n.currentTranslate===n.startTranslate)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);n.isTouched=!1,n.isMoved=!1,n.startMoving=!1;var p=void 0;if(p=i.followFinger?r?t.translate:-t.translate:-n.currentTranslate,i.freeMode){if(p<-t.minTranslate())return void t.slideTo(t.activeIndex);if(p>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(i.freeModeMomentum){if(1<n.velocities.length){var h=n.velocities.pop(),f=n.velocities.pop(),m=h.position-f.position,v=h.time-f.time;t.velocity=m/v,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(150<v||300<R.now()-h.time)&&(t.velocity=0)}else t.velocity=0;t.velocity*=i.freeModeMomentumVelocityRatio,n.velocities.length=0;var g=1e3*i.freeModeMomentumRatio,y=t.velocity*g,b=t.translate+y;r&&(b=-b);var w=!1,x=void 0,T=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio,E=void 0;if(b<t.maxTranslate())i.freeModeMomentumBounce?(b+t.maxTranslate()<-T&&(b=t.maxTranslate()-T),x=t.maxTranslate(),w=!0,n.allowMomentumBounce=!0):b=t.maxTranslate(),i.loop&&i.centeredSlides&&(E=!0);else if(b>t.minTranslate())i.freeModeMomentumBounce?(b-t.minTranslate()>T&&(b=t.minTranslate()+T),x=t.minTranslate(),w=!0,n.allowMomentumBounce=!0):b=t.minTranslate(),i.loop&&i.centeredSlides&&(E=!0);else if(i.freeModeSticky){for(var S=void 0,C=0;C<l.length;C+=1)if(l[C]>-b){S=C;break}b=-(b=Math.abs(l[S]-b)<Math.abs(l[S-1]-b)||"next"===t.swipeDirection?l[S]:l[S-1])}if(E&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity)g=r?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity);else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&w?(t.updateProgress(x),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,s.transitionEnd(function(){t&&!t.destroyed&&n.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(i.speed),t.setTranslate(x),s.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(b),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,s.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(i.freeModeSticky)return void t.slideToClosest();(!i.freeModeMomentum||u>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var $=0,k=t.slidesSizesGrid[0],M=0;M<o.length;M+=i.slidesPerGroup)void 0!==o[M+i.slidesPerGroup]?p>=o[M]&&p<o[M+i.slidesPerGroup]&&(k=o[($=M)+i.slidesPerGroup]-o[M]):p>=o[M]&&($=M,k=o[o.length-1]-o[o.length-2]);var P=(p-o[$])/k;if(u>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(P>=i.longSwipesRatio?t.slideTo($+i.slidesPerGroup):t.slideTo($)),"prev"===t.swipeDirection&&(P>1-i.longSwipesRatio?t.slideTo($+i.slidesPerGroup):t.slideTo($))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&t.slideTo($+i.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo($)}}}.bind(e),e.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e);var r="container"===t.touchEventsTarget?i:a,s=!!t.nested;if(V.touch||!V.pointerEvents&&!V.prefixedPointerEvents){if(V.touch){var o=!("touchstart"!==n.start||!V.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};r.addEventListener(n.start,e.onTouchStart,o),r.addEventListener(n.move,e.onTouchMove,V.passiveListener?{passive:!1,capture:s}:s),r.addEventListener(n.end,e.onTouchEnd,o)}(t.simulateTouch&&!b.ios&&!b.android||t.simulateTouch&&!V.touch&&b.ios)&&(r.addEventListener("mousedown",e.onTouchStart,!1),G.document.addEventListener("mousemove",e.onTouchMove,s),G.document.addEventListener("mouseup",e.onTouchEnd,!1))}else r.addEventListener(n.start,e.onTouchStart,!1),G.document.addEventListener(n.move,e.onTouchMove,s),G.document.addEventListener(n.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&r.addEventListener("click",e.onClick,!0),e.on(b.ios||b.android?"resize orientationchange observerUpdate":"resize observerUpdate",w,!0)},detachEvents:function(){var e=this,t=e.params,n=e.touchEvents,i=e.el,a=e.wrapperEl,r="container"===t.touchEventsTarget?i:a,s=!!t.nested;if(V.touch||!V.pointerEvents&&!V.prefixedPointerEvents){if(V.touch){var o=!("onTouchStart"!==n.start||!V.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};r.removeEventListener(n.start,e.onTouchStart,o),r.removeEventListener(n.move,e.onTouchMove,s),r.removeEventListener(n.end,e.onTouchEnd,o)}(t.simulateTouch&&!b.ios&&!b.android||t.simulateTouch&&!V.touch&&b.ios)&&(r.removeEventListener("mousedown",e.onTouchStart,!1),G.document.removeEventListener("mousemove",e.onTouchMove,s),G.document.removeEventListener("mouseup",e.onTouchEnd,!1))}else r.removeEventListener(n.start,e.onTouchStart,!1),G.document.removeEventListener(n.move,e.onTouchMove,s),G.document.removeEventListener(n.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&r.removeEventListener("click",e.onClick,!0),e.off(b.ios||b.android?"resize orientationchange observerUpdate":"resize observerUpdate",w)}};var T,E={setBreakpoint:function(){var e=this,t=e.activeIndex,n=e.initialized,i=e.loopedSlides,a=void 0===i?0:i,r=e.params,s=r.breakpoints;if(s&&(!s||0!==Object.keys(s).length)){var o=e.getBreakpoint(s);if(o&&e.currentBreakpoint!==o){var l=o in s?s[o]:void 0;l&&["slidesPerView","spaceBetween","slidesPerGroup"].forEach(function(e){var t=l[e];void 0!==t&&(l[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")});var d=l||e.originalParams,c=r.loop&&d.slidesPerView!==r.slidesPerView;R.extend(e.params,d),R.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=o,c&&n&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-a+e.loopedSlides,0,!1)),e.emit("breakpoint",d)}}},getBreakpoint:function(e){if(e){var t=!1,n=[];Object.keys(e).forEach(function(e){n.push(e)}),n.sort(function(e,t){return parseInt(e,10)-parseInt(t,10)});for(var i=0;i<n.length;i+=1){var a=n[i];this.params.breakpointsInverse?a<=G.window.innerWidth&&(t=a):a>=G.window.innerWidth&&!t&&(t=a)}return t||"max"}}},I={isIE:!!G.window.navigator.userAgent.match(/Trident/g)||!!G.window.navigator.userAgent.match(/MSIE/g),isEdge:!!G.window.navigator.userAgent.match(/Edge/g),isSafari:(T=G.window.navigator.userAgent.toLowerCase(),0<=T.indexOf("safari")&&T.indexOf("chrome")<0&&T.indexOf("android")<0),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(G.window.navigator.userAgent)};var S={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsInverse:!1,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},C={update:d,translate:c,transition:u,slide:p,loop:h,grabCursor:g,manipulation:y,events:x,breakpoints:E,checkOverflow:{checkOverflow:function(){var e=this,t=e.isLocked;e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),t&&t!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,n=this.params,e=this.rtl,i=this.$el,a=[];a.push(n.direction),n.freeMode&&a.push("free-mode"),V.flexbox||a.push("no-flexbox"),n.autoHeight&&a.push("autoheight"),e&&a.push("rtl"),1<n.slidesPerColumn&&a.push("multirow"),b.android&&a.push("android"),b.ios&&a.push("ios"),(I.isIE||I.isEdge)&&(V.pointerEvents||V.prefixedPointerEvents)&&a.push("wp8-"+n.direction),a.forEach(function(e){t.push(n.containerModifierClass+e)}),i.addClass(t.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,n,i,a,r){var s=void 0;function o(){r&&r()}e.complete&&a?o():t?((s=new G.window.Image).onload=o,s.onerror=o,i&&(s.sizes=i),n&&(s.srcset=n),t&&(s.src=t)):o()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var n=0;n<e.imagesToLoad.length;n+=1){var i=e.imagesToLoad[n];e.loadImage(i,i.currentSrc||i.getAttribute("src"),i.srcset||i.getAttribute("srcset"),i.sizes||i.getAttribute("sizes"),!0,t)}}}},$={},k=function(e){function h(){v(this,h);for(var e=void 0,a=void 0,t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];(a=1===n.length&&n[0].constructor&&n[0].constructor===Object?n[0]:(e=n[0],n[1]))||(a={}),a=R.extend({},a),e&&!a.el&&(a.el=e);var r=m(this,(h.__proto__||Object.getPrototypeOf(h)).call(this,a));Object.keys(C).forEach(function(t){Object.keys(C[t]).forEach(function(e){h.prototype[e]||(h.prototype[e]=C[t][e])})});var s=r;void 0===s.modules&&(s.modules={}),Object.keys(s.modules).forEach(function(e){var t=s.modules[e];if(t.params){var n=Object.keys(t.params)[0],i=t.params[n];if("object"!==(void 0===i?"undefined":f(i))||null===i)return;if(!(n in a&&"enabled"in i))return;!0===a[n]&&(a[n]={enabled:!0}),"object"!==f(a[n])||"enabled"in a[n]||(a[n].enabled=!0),a[n]||(a[n]={enabled:!1})}});var o=R.extend({},S);s.useModulesParams(o),s.params=R.extend({},o,$,a),s.originalParams=R.extend({},s.params),s.passedParams=R.extend({},a),s.$=A.$;var l=(0,A.$)(s.params.el);if(!(e=l[0]))return m(r,void 0);if(1<l.length){var d=[];return l.each(function(e,t){var n=R.extend({},a,{el:t});d.push(new h(n))}),m(r,d)}e.swiper=s,l.data("swiper",s);var c,u,p=l.children("."+s.params.wrapperClass);return R.extend(s,{$el:l,el:e,$wrapperEl:p,wrapperEl:p[0],classNames:[],slides:(0,A.$)(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===s.params.direction},isVertical:function(){return"vertical"===s.params.direction},rtl:"rtl"===e.dir.toLowerCase()||"rtl"===l.css("direction"),rtlTranslate:"horizontal"===s.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===l.css("direction")),wrongRTL:"-webkit-box"===p.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:s.params.allowSlideNext,allowSlidePrev:s.params.allowSlidePrev,touchEvents:(c=["touchstart","touchmove","touchend"],u=["mousedown","mousemove","mouseup"],V.pointerEvents?u=["pointerdown","pointermove","pointerup"]:V.prefixedPointerEvents&&(u=["MSPointerDown","MSPointerMove","MSPointerUp"]),s.touchEventsTouch={start:c[0],move:c[1],end:c[2]},s.touchEventsDesktop={start:u[0],move:u[1],end:u[2]},V.touch||!s.params.simulateTouch?s.touchEventsTouch:s.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:R.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:s.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),s.useModules(),s.params.init&&s.init(),m(r,s)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(h,l),i(h,[{key:"slidesPerViewDynamic",value:function(){var e=this,t=e.params,n=e.slides,i=e.slidesGrid,a=e.size,r=e.activeIndex,s=1;if(t.centeredSlides){for(var o=n[r].swiperSlideSize,l=void 0,d=r+1;d<n.length;d+=1)n[d]&&!l&&(s+=1,a<(o+=n[d].swiperSlideSize)&&(l=!0));for(var c=r-1;0<=c;c-=1)n[c]&&!l&&(s+=1,a<(o+=n[c].swiperSlideSize)&&(l=!0))}else for(var u=r+1;u<n.length;u+=1)i[u]-i[r]<a&&(s+=1);return s}},{key:"update",value:function(){var n=this;if(n&&!n.destroyed){var e=n.snapGrid,t=n.params;t.breakpoints&&n.setBreakpoint(),n.updateSize(),n.updateSlides(),n.updateProgress(),n.updateSlidesClasses();n.params.freeMode?(i(),n.params.autoHeight&&n.updateAutoHeight()):(("auto"===n.params.slidesPerView||1<n.params.slidesPerView)&&n.isEnd&&!n.params.centeredSlides?n.slideTo(n.slides.length-1,0,!1,!0):n.slideTo(n.activeIndex,0,!1,!0))||i(),t.watchOverflow&&e!==n.snapGrid&&n.checkOverflow(),n.emit("update")}function i(){var e=n.rtlTranslate?-1*n.translate:n.translate,t=Math.min(Math.max(e,n.maxTranslate()),n.minTranslate());n.setTranslate(t),n.updateActiveIndex(),n.updateSlidesClasses()}}},{key:"init",value:function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))}},{key:"destroy",value:function(){var e=!(0<arguments.length&&void 0!==arguments[0])||arguments[0],t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=this,i=n.params,a=n.$el,r=n.$wrapperEl,s=n.slides;return void 0===n.params||n.destroyed||(n.emit("beforeDestroy"),n.initialized=!1,n.detachEvents(),i.loop&&n.loopDestroy(),t&&(n.removeClasses(),a.removeAttr("style"),r.removeAttr("style"),s&&s.length&&s.removeClass([i.slideVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),n.emit("destroy"),Object.keys(n.eventsListeners).forEach(function(e){n.off(e)}),!1!==e&&(n.$el[0].swiper=null,n.$el.data("swiper",null),R.deleteProps(n)),n.destroyed=!0),null}}],[{key:"extendDefaults",value:function(e){R.extend($,e)}},{key:"extendedDefaults",get:function(){return $}},{key:"defaults",get:function(){return S}},{key:"Class",get:function(){return l}},{key:"$",get:function(){return A.$}}]),h}(),M={name:"device",proto:{device:b},static:{device:b}},P={name:"support",proto:{support:V},static:{support:V}},z={name:"browser",proto:{browser:I},static:{browser:I}},L={name:"resize",create:function(){var e=this;R.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){G.window.addEventListener("resize",this.resize.resizeHandler),G.window.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){G.window.removeEventListener("resize",this.resize.resizeHandler),G.window.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},O={func:G.window.MutationObserver||G.window.WebkitMutationObserver,attach:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=this,i=new O.func(function(e){if(1!==e.length){var t=function(){n.emit("observerUpdate",e[0])};G.window.requestAnimationFrame?G.window.requestAnimationFrame(t):G.window.setTimeout(t,0)}else n.emit("observerUpdate",e[0])});i.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),n.observer.observers.push(i)},init:function(){var e=this;if(V.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),n=0;n<t.length;n+=1)e.observer.attach(t[n]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},D={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){R.extend(this,{observer:{init:O.init.bind(this),attach:O.attach.bind(this),destroy:O.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},j={update:function(e){var t=this,n=t.params,i=n.slidesPerView,a=n.slidesPerGroup,r=n.centeredSlides,s=t.params.virtual,o=s.addSlidesBefore,l=s.addSlidesAfter,d=t.virtual,c=d.from,u=d.to,p=d.slides,h=d.slidesGrid,f=d.renderSlide,m=d.offset;t.updateActiveIndex();var v=t.activeIndex||0,g=void 0;g=t.rtlTranslate?"right":t.isHorizontal()?"left":"top";var y=void 0,b=void 0;b=r?(y=Math.floor(i/2)+a+o,Math.floor(i/2)+a+l):(y=i+(a-1)+o,a+l);var w=Math.max((v||0)-b,0),x=Math.min((v||0)+y,p.length-1),T=(t.slidesGrid[w]||0)-(t.slidesGrid[0]||0);function E(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(R.extend(t.virtual,{from:w,to:x,offset:T,slidesGrid:t.slidesGrid}),c===w&&u===x&&!e)return t.slidesGrid!==h&&T!==m&&t.slides.css(g,T+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:T,from:w,to:x,slides:function(){for(var e=[],t=w;t<=x;t+=1)e.push(p[t]);return e}()}),void E();var S=[],C=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var $=c;$<=u;$+=1)($<w||x<$)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+$+'"]').remove();for(var k=0;k<p.length;k+=1)w<=k&&k<=x&&(void 0===u||e?C.push(k):(u<k&&C.push(k),k<c&&S.push(k)));C.forEach(function(e){t.$wrapperEl.append(f(p[e],e))}),S.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(f(p[e],e))}),t.$wrapperEl.children(".swiper-slide").css(g,T+"px"),E()},renderSlide:function(e,t){var n=this,i=n.params.virtual;if(i.cache&&n.virtual.cache[t])return n.virtual.cache[t];var a=i.renderSlide?(0,A.$)(i.renderSlide.call(n,e,t)):(0,A.$)('<div class="'+n.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return a.attr("data-swiper-slide-index")||a.attr("data-swiper-slide-index",t),i.cache&&(n.virtual.cache[t]=a),a},appendSlide:function(e){this.virtual.slides.push(e),this.virtual.update(!0)},prependSlide:function(e){var t=this;if(t.virtual.slides.unshift(e),t.params.virtual.cache){var n=t.virtual.cache,i={};Object.keys(n).forEach(function(e){i[e+1]=n[e]}),t.virtual.cache=i}t.virtual.update(!0),t.slideNext(0)}},N={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create:function(){var e=this;R.extend(e,{virtual:{update:j.update.bind(e),appendSlide:j.appendSlide.bind(e),prependSlide:j.prependSlide.bind(e),renderSlide:j.renderSlide.bind(e),slides:e.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e=this;if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+"virtual");var t={watchSlidesProgress:!0};R.extend(e.params,t),R.extend(e.originalParams,t),e.params.initialSlide||e.virtual.update()}},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},H={handle:function(e){var t=this,n=t.rtlTranslate,i=e;i.originalEvent&&(i=i.originalEvent);var a=i.keyCode||i.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===a||t.isVertical()&&40===a))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===a||t.isVertical()&&38===a))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||G.document.activeElement&&G.document.activeElement.nodeName&&("input"===G.document.activeElement.nodeName.toLowerCase()||"textarea"===G.document.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(37===a||39===a||38===a||40===a)){var r=!1;if(0<t.$el.parents("."+t.params.slideClass).length&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var s=G.window.innerWidth,o=G.window.innerHeight,l=t.$el.offset();n&&(l.left-=t.$el[0].scrollLeft);for(var d=[[l.left,l.top],[l.left+t.width,l.top],[l.left,l.top+t.height],[l.left+t.width,l.top+t.height]],c=0;c<d.length;c+=1){var u=d[c];0<=u[0]&&u[0]<=s&&0<=u[1]&&u[1]<=o&&(r=!0)}if(!r)return}t.isHorizontal()?(37!==a&&39!==a||(i.preventDefault?i.preventDefault():i.returnValue=!1),(39===a&&!n||37===a&&n)&&t.slideNext(),(37===a&&!n||39===a&&n)&&t.slidePrev()):(38!==a&&40!==a||(i.preventDefault?i.preventDefault():i.returnValue=!1),40===a&&t.slideNext(),38===a&&t.slidePrev()),t.emit("keyPress",a)}},enable:function(){this.keyboard.enabled||((0,A.$)(G.document).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&((0,A.$)(G.document).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},F={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){R.extend(this,{keyboard:{enabled:!1,enable:H.enable.bind(this),disable:H.disable.bind(this),handle:H.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}};var B={lastScrollTime:R.now(),event:-1<G.window.navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":function(){var e="onwheel",t=e in G.document;if(!t){var n=G.document.createElement("div");n.setAttribute(e,"return;"),t="function"==typeof n[e]}return!t&&G.document.implementation&&G.document.implementation.hasFeature&&!0!==G.document.implementation.hasFeature("","")&&(t=G.document.implementation.hasFeature("Events.wheel","3.0")),t}()?"wheel":"mousewheel",normalize:function(e){var t=0,n=0,i=0,a=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),i=10*t,a=10*n,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(i=e.deltaX),(i||a)&&e.deltaMode&&(1===e.deltaMode?(i*=40,a*=40):(i*=800,a*=800)),i&&!t&&(t=i<1?-1:1),a&&!n&&(n=a<1?-1:1),{spinX:t,spinY:n,pixelX:i,pixelY:a}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,n=this,i=n.params.mousewheel;if(!n.mouseEntered&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var a=0,r=n.rtlTranslate?-1:1,s=B.normalize(t);if(i.forceToAxis)if(n.isHorizontal()){if(!(Math.abs(s.pixelX)>Math.abs(s.pixelY)))return!0;a=s.pixelX*r}else{if(!(Math.abs(s.pixelY)>Math.abs(s.pixelX)))return!0;a=s.pixelY}else a=Math.abs(s.pixelX)>Math.abs(s.pixelY)?-s.pixelX*r:-s.pixelY;if(0===a)return!0;if(i.invert&&(a=-a),n.params.freeMode){n.params.loop&&n.loopFix();var o=n.getTranslate()+a*i.sensitivity,l=n.isBeginning,d=n.isEnd;if(o>=n.minTranslate()&&(o=n.minTranslate()),o<=n.maxTranslate()&&(o=n.maxTranslate()),n.setTransition(0),n.setTranslate(o),n.updateProgress(),n.updateActiveIndex(),n.updateSlidesClasses(),(!l&&n.isBeginning||!d&&n.isEnd)&&n.updateSlidesClasses(),n.params.freeModeSticky&&(clearTimeout(n.mousewheel.timeout),n.mousewheel.timeout=R.nextTick(function(){n.slideToClosest()},300)),n.emit("scroll",t),n.params.autoplay&&n.params.autoplayDisableOnInteraction&&n.autoplay.stop(),o===n.minTranslate()||o===n.maxTranslate())return!0}else{if(60<R.now()-n.mousewheel.lastScrollTime)if(a<0)if(n.isEnd&&!n.params.loop||n.animating){if(i.releaseOnEdges)return!0}else n.slideNext(),n.emit("scroll",t);else if(n.isBeginning&&!n.params.loop||n.animating){if(i.releaseOnEdges)return!0}else n.slidePrev(),n.emit("scroll",t);n.mousewheel.lastScrollTime=(new G.window.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable:function(){var e=this;if(!B.event)return!1;if(e.mousewheel.enabled)return!1;var t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=(0,A.$)(e.params.mousewheel.eventsTarged)),t.on("mouseenter",e.mousewheel.handleMouseEnter),t.on("mouseleave",e.mousewheel.handleMouseLeave),t.on(B.event,e.mousewheel.handle),e.mousewheel.enabled=!0},disable:function(){var e=this;if(!B.event)return!1;if(!e.mousewheel.enabled)return!1;var t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=(0,A.$)(e.params.mousewheel.eventsTarged)),t.off(B.event,e.mousewheel.handle),!(e.mousewheel.enabled=!1)}},X={update:function(){var e=this,t=e.params.navigation;if(!e.params.loop){var n=e.navigation,i=n.$nextEl,a=n.$prevEl;a&&0<a.length&&(e.isBeginning?a.addClass(t.disabledClass):a.removeClass(t.disabledClass),a[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),i&&0<i.length&&(e.isEnd?i.addClass(t.disabledClass):i.removeClass(t.disabledClass),i[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))}},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e=this,t=e.params.navigation;if(t.nextEl||t.prevEl){var n=void 0,i=void 0;t.nextEl&&(n=(0,A.$)(t.nextEl),e.params.uniqueNavElements&&"string"==typeof t.nextEl&&1<n.length&&1===e.$el.find(t.nextEl).length&&(n=e.$el.find(t.nextEl))),t.prevEl&&(i=(0,A.$)(t.prevEl),e.params.uniqueNavElements&&"string"==typeof t.prevEl&&1<i.length&&1===e.$el.find(t.prevEl).length&&(i=e.$el.find(t.prevEl))),n&&0<n.length&&n.on("click",e.navigation.onNextClick),i&&0<i.length&&i.on("click",e.navigation.onPrevClick),R.extend(e.navigation,{$nextEl:n,nextEl:n&&n[0],$prevEl:i,prevEl:i&&i[0]})}},destroy:function(){var e=this,t=e.navigation,n=t.$nextEl,i=t.$prevEl;n&&n.length&&(n.off("click",e.navigation.onNextClick),n.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off("click",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}},q={update:function(){var e=this,t=e.rtl,a=e.params.pagination;if(a.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el,r=void 0,s=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((r=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>n-1-2*e.loopedSlides&&(r-=n-2*e.loopedSlides),s-1<r&&(r-=s),r<0&&"bullets"!==e.params.paginationType&&(r=s+r)):r=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===a.type&&e.pagination.bullets&&0<e.pagination.bullets.length){var o=e.pagination.bullets,l=void 0,d=void 0,c=void 0;if(a.dynamicBullets&&(e.pagination.bulletSize=o.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),i.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(a.dynamicMainBullets+4)+"px"),1<a.dynamicMainBullets&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=r-e.previousIndex,e.pagination.dynamicBulletIndex>a.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=a.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),l=r-e.pagination.dynamicBulletIndex,c=((d=l+(Math.min(o.length,a.dynamicMainBullets)-1))+l)/2),o.removeClass(a.bulletActiveClass+" "+a.bulletActiveClass+"-next "+a.bulletActiveClass+"-next-next "+a.bulletActiveClass+"-prev "+a.bulletActiveClass+"-prev-prev "+a.bulletActiveClass+"-main"),1<i.length)o.each(function(e,t){var n=(0,A.$)(t),i=n.index();i===r&&n.addClass(a.bulletActiveClass),a.dynamicBullets&&(l<=i&&i<=d&&n.addClass(a.bulletActiveClass+"-main"),i===l&&n.prev().addClass(a.bulletActiveClass+"-prev").prev().addClass(a.bulletActiveClass+"-prev-prev"),i===d&&n.next().addClass(a.bulletActiveClass+"-next").next().addClass(a.bulletActiveClass+"-next-next"))});else if(o.eq(r).addClass(a.bulletActiveClass),a.dynamicBullets){for(var u=o.eq(l),p=o.eq(d),h=l;h<=d;h+=1)o.eq(h).addClass(a.bulletActiveClass+"-main");u.prev().addClass(a.bulletActiveClass+"-prev").prev().addClass(a.bulletActiveClass+"-prev-prev"),p.next().addClass(a.bulletActiveClass+"-next").next().addClass(a.bulletActiveClass+"-next-next")}if(a.dynamicBullets){var f=Math.min(o.length,a.dynamicMainBullets+4),m=(e.pagination.bulletSize*f-e.pagination.bulletSize)/2-c*e.pagination.bulletSize,v=t?"right":"left";o.css(e.isHorizontal()?v:"top",m+"px")}}if("fraction"===a.type&&(i.find("."+a.currentClass).text(a.formatFractionCurrent(r+1)),i.find("."+a.totalClass).text(a.formatFractionTotal(s))),"progressbar"===a.type){var g=void 0;g=a.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";var y=(r+1)/s,b=1,w=1;"horizontal"===g?b=y:w=y,i.find("."+a.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+b+") scaleY("+w+")").transition(e.params.speed)}"custom"===a.type&&a.renderCustom?(i.html(a.renderCustom(e,r+1,s)),e.emit("paginationRender",e,i[0])):e.emit("paginationUpdate",e,i[0]),i[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](a.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el,a="";if("bullets"===t.type){for(var r=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,s=0;s<r;s+=1)t.renderBullet?a+=t.renderBullet.call(e,s,t.bulletClass):a+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";i.html(a),e.pagination.bullets=i.find("."+t.bulletClass)}"fraction"===t.type&&(a=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',i.html(a)),"progressbar"===t.type&&(a=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',i.html(a)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var n=this,e=n.params.pagination;if(e.el){var t=(0,A.$)(e.el);0!==t.length&&(n.params.uniqueNavElements&&"string"==typeof e.el&&1<t.length&&1===n.$el.find(e.el).length&&(t=n.$el.find(e.el)),"bullets"===e.type&&e.clickable&&t.addClass(e.clickableClass),t.addClass(e.modifierClass+e.type),"bullets"===e.type&&e.dynamicBullets&&(t.addClass(""+e.modifierClass+e.type+"-dynamic"),n.pagination.dynamicBulletIndex=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&t.addClass(e.progressbarOppositeClass),e.clickable&&t.on("click","."+e.bulletClass,function(e){e.preventDefault();var t=(0,A.$)(this).index()*n.params.slidesPerGroup;n.params.loop&&(t+=n.loopedSlides),n.slideTo(t)}),R.extend(n.pagination,{$el:t,el:t[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n=e.pagination.$el;n.removeClass(t.hiddenClass),n.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&n.off("click","."+t.bulletClass)}}},Y={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,n=e.rtlTranslate,i=e.progress,a=t.dragSize,r=t.trackSize,s=t.$dragEl,o=t.$el,l=e.params.scrollbar,d=a,c=(r-a)*i;n?0<(c=-c)?(d=a-c,c=0):r<-c+a&&(d=r+c):c<0?(d=a+c,c=0):r<c+a&&(d=r-c),e.isHorizontal()?(V.transforms3d?s.transform("translate3d("+c+"px, 0, 0)"):s.transform("translateX("+c+"px)"),s[0].style.width=d+"px"):(V.transforms3d?s.transform("translate3d(0px, "+c+"px, 0)"):s.transform("translateY("+c+"px)"),s[0].style.height=d+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout(function(){o[0].style.opacity=0,o.transition(400)},1e3))}},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,n=t.$dragEl,i=t.$el;n[0].style.width="",n[0].style.height="";var a=e.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,r=e.size/e.virtualSize,s=r*(a/e.size),o=void 0;o="auto"===e.params.scrollbar.dragSize?a*r:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?n[0].style.width=o+"px":n[0].style.height=o+"px",i[0].style.display=1<=r?"none":"",e.params.scrollbarHide&&(i[0].style.opacity=0),R.extend(t,{trackSize:a,divider:r,moveDivider:s,dragSize:o}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)}},setDragPosition:function(e){var t=this,n=t.scrollbar,i=t.rtlTranslate,a=n.$el,r=n.dragSize,s=n.trackSize,o=void 0;o=((t.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-a.offset()[t.isHorizontal()?"left":"top"]-r/2)/(s-r),o=Math.max(Math.min(o,1),0),i&&(o=1-o);var l=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*o;t.updateProgress(l),t.setTranslate(l),t.updateActiveIndex(),t.updateSlidesClasses()},onDragStart:function(e){var t=this,n=t.params.scrollbar,i=t.scrollbar,a=t.$wrapperEl,r=i.$el,s=i.$dragEl;t.scrollbar.isTouched=!0,e.preventDefault(),e.stopPropagation(),a.transition(100),s.transition(100),i.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),r.transition(0),n.hide&&r.css("opacity",1),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,n=this.$wrapperEl,i=t.$el,a=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),n.transition(0),i.transition(0),a.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,n=t.params.scrollbar,i=t.scrollbar.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,n.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=R.nextTick(function(){i.css("opacity",0),i.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),n.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,n=e.touchEventsTouch,i=e.touchEventsDesktop,a=e.params,r=t.$el[0],s=!(!V.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},o=!(!V.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};V.touch?(r.addEventListener(n.start,e.scrollbar.onDragStart,s),r.addEventListener(n.move,e.scrollbar.onDragMove,s),r.addEventListener(n.end,e.scrollbar.onDragEnd,o)):(r.addEventListener(i.start,e.scrollbar.onDragStart,s),G.document.addEventListener(i.move,e.scrollbar.onDragMove,s),G.document.addEventListener(i.end,e.scrollbar.onDragEnd,o))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,n=e.touchEventsTouch,i=e.touchEventsDesktop,a=e.params,r=t.$el[0],s=!(!V.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},o=!(!V.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};V.touch?(r.removeEventListener(n.start,e.scrollbar.onDragStart,s),r.removeEventListener(n.move,e.scrollbar.onDragMove,s),r.removeEventListener(n.end,e.scrollbar.onDragEnd,o)):(r.removeEventListener(i.start,e.scrollbar.onDragStart,s),G.document.removeEventListener(i.move,e.scrollbar.onDragMove,s),G.document.removeEventListener(i.end,e.scrollbar.onDragEnd,o))}},init:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,n=e.$el,i=e.params.scrollbar,a=(0,A.$)(i.el);e.params.uniqueNavElements&&"string"==typeof i.el&&1<a.length&&1===n.find(i.el).length&&(a=n.find(i.el));var r=a.find("."+e.params.scrollbar.dragClass);0===r.length&&(r=(0,A.$)('<div class="'+e.params.scrollbar.dragClass+'"></div>'),a.append(r)),R.extend(t,{$el:a,el:a[0],$dragEl:r,dragEl:r[0]}),i.draggable&&t.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},W={setTransform:function(e,t){var n=this.rtl,i=(0,A.$)(e),a=n?-1:1,r=i.attr("data-swiper-parallax")||"0",s=i.attr("data-swiper-parallax-x"),o=i.attr("data-swiper-parallax-y"),l=i.attr("data-swiper-parallax-scale"),d=i.attr("data-swiper-parallax-opacity");if(s||o?(s=s||"0",o=o||"0"):this.isHorizontal()?(s=r,o="0"):(o=r,s="0"),s=0<=s.indexOf("%")?parseInt(s,10)*t*a+"%":s*t*a+"px",o=0<=o.indexOf("%")?parseInt(o,10)*t+"%":o*t+"px",null!=d){var c=d-(d-1)*(1-Math.abs(t));i[0].style.opacity=c}if(null==l)i.transform("translate3d("+s+", "+o+", 0px)");else{var u=l-(l-1)*(1-Math.abs(t));i.transform("translate3d("+s+", "+o+", 0px) scale("+u+")")}},setTranslate:function(){var i=this,e=i.$el,t=i.slides,a=i.progress,r=i.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,t){i.parallax.setTransform(t,a)}),t.each(function(e,t){var n=t.progress;1<i.params.slidesPerGroup&&"auto"!==i.params.slidesPerView&&(n+=Math.ceil(e/2)-a*(r.length-1)),n=Math.min(Math.max(n,-1),1),(0,A.$)(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,t){i.parallax.setTransform(t,n)})})},setTransition:function(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.params.speed;this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(e,t){var n=(0,A.$)(t),i=parseInt(n.attr("data-swiper-parallax-duration"),10)||a;0===a&&(i=0),n.transition(i)})}},_={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(a-n,2))},onGestureStart:function(e){var t=this,n=t.params.zoom,i=t.zoom,a=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!V.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,a.scaleStart=_.getDistanceBetweenTouches(e)}a.$slideEl&&a.$slideEl.length||(a.$slideEl=(0,A.$)(e.target).closest(".swiper-slide"),0===a.$slideEl.length&&(a.$slideEl=t.slides.eq(t.activeIndex)),a.$imageEl=a.$slideEl.find("img, svg, canvas"),a.$imageWrapEl=a.$imageEl.parent("."+n.containerClass),a.maxRatio=a.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,0!==a.$imageWrapEl.length)?(a.$imageEl.transition(0),t.zoom.isScaling=!0):a.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,n=this.zoom,i=n.gesture;if(!V.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;n.fakeGestureMoved=!0,i.scaleMove=_.getDistanceBetweenTouches(e)}i.$imageEl&&0!==i.$imageEl.length&&(n.scale=V.gestures?e.scale*n.currentScale:i.scaleMove/i.scaleStart*n.currentScale,n.scale>i.maxRatio&&(n.scale=i.maxRatio-1+Math.pow(n.scale-i.maxRatio+1,.5)),n.scale<t.minRatio&&(n.scale=t.minRatio+1-Math.pow(t.minRatio-n.scale+1,.5)),i.$imageEl.transform("translate3d(0,0,0) scale("+n.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,n=this.zoom,i=n.gesture;if(!V.gestures){if(!n.fakeGestureTouched||!n.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!b.android)return;n.fakeGestureTouched=!1,n.fakeGestureMoved=!1}i.$imageEl&&0!==i.$imageEl.length&&(n.scale=Math.max(Math.min(n.scale,i.maxRatio),t.minRatio),i.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+n.scale+")"),n.currentScale=n.scale,n.isScaling=!1,1===n.scale&&(i.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,n=t.gesture,i=t.image;n.$imageEl&&0!==n.$imageEl.length&&(i.isTouched||(b.android&&e.preventDefault(),i.isTouched=!0,i.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,i.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,n=t.zoom,i=n.gesture,a=n.image,r=n.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(t.allowClick=!1,a.isTouched&&i.$slideEl)){a.isMoved||(a.width=i.$imageEl[0].offsetWidth,a.height=i.$imageEl[0].offsetHeight,a.startX=R.getTranslate(i.$imageWrapEl[0],"x")||0,a.startY=R.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),t.rtl&&(a.startX=-a.startX,a.startY=-a.startY));var s=a.width*n.scale,o=a.height*n.scale;if(!(s<i.slideWidth&&o<i.slideHeight)){if(a.minX=Math.min(i.slideWidth/2-s/2,0),a.maxX=-a.minX,a.minY=Math.min(i.slideHeight/2-o/2,0),a.maxY=-a.minY,a.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,a.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!a.isMoved&&!n.isScaling){if(t.isHorizontal()&&(Math.floor(a.minX)===Math.floor(a.startX)&&a.touchesCurrent.x<a.touchesStart.x||Math.floor(a.maxX)===Math.floor(a.startX)&&a.touchesCurrent.x>a.touchesStart.x))return void(a.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(a.minY)===Math.floor(a.startY)&&a.touchesCurrent.y<a.touchesStart.y||Math.floor(a.maxY)===Math.floor(a.startY)&&a.touchesCurrent.y>a.touchesStart.y))return void(a.isTouched=!1)}e.preventDefault(),e.stopPropagation(),a.isMoved=!0,a.currentX=a.touchesCurrent.x-a.touchesStart.x+a.startX,a.currentY=a.touchesCurrent.y-a.touchesStart.y+a.startY,a.currentX<a.minX&&(a.currentX=a.minX+1-Math.pow(a.minX-a.currentX+1,.8)),a.currentX>a.maxX&&(a.currentX=a.maxX-1+Math.pow(a.currentX-a.maxX+1,.8)),a.currentY<a.minY&&(a.currentY=a.minY+1-Math.pow(a.minY-a.currentY+1,.8)),a.currentY>a.maxY&&(a.currentY=a.maxY-1+Math.pow(a.currentY-a.maxY+1,.8)),r.prevPositionX||(r.prevPositionX=a.touchesCurrent.x),r.prevPositionY||(r.prevPositionY=a.touchesCurrent.y),r.prevTime||(r.prevTime=Date.now()),r.x=(a.touchesCurrent.x-r.prevPositionX)/(Date.now()-r.prevTime)/2,r.y=(a.touchesCurrent.y-r.prevPositionY)/(Date.now()-r.prevTime)/2,Math.abs(a.touchesCurrent.x-r.prevPositionX)<2&&(r.x=0),Math.abs(a.touchesCurrent.y-r.prevPositionY)<2&&(r.y=0),r.prevPositionX=a.touchesCurrent.x,r.prevPositionY=a.touchesCurrent.y,r.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+a.currentX+"px, "+a.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,n=e.image,i=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!n.isTouched||!n.isMoved)return n.isTouched=!1,void(n.isMoved=!1);n.isTouched=!1,n.isMoved=!1;var a=300,r=300,s=i.x*a,o=n.currentX+s,l=i.y*r,d=n.currentY+l;0!==i.x&&(a=Math.abs((o-n.currentX)/i.x)),0!==i.y&&(r=Math.abs((d-n.currentY)/i.y));var c=Math.max(a,r);n.currentX=o,n.currentY=d;var u=n.width*e.scale,p=n.height*e.scale;n.minX=Math.min(t.slideWidth/2-u/2,0),n.maxX=-n.minX,n.minY=Math.min(t.slideHeight/2-p/2,0),n.maxY=-n.minY,n.currentX=Math.max(Math.min(n.currentX,n.maxX),n.minX),n.currentY=Math.max(Math.min(n.currentY,n.maxY),n.minY),t.$imageWrapEl.transition(c).transform("translate3d("+n.currentX+"px, "+n.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t=this,n=t.zoom,i=t.params.zoom,a=n.gesture,r=n.image;if(a.$slideEl||(a.$slideEl=t.clickedSlide?(0,A.$)(t.clickedSlide):t.slides.eq(t.activeIndex),a.$imageEl=a.$slideEl.find("img, svg, canvas"),a.$imageWrapEl=a.$imageEl.parent("."+i.containerClass)),a.$imageEl&&0!==a.$imageEl.length){a.$slideEl.addClass(""+i.zoomedSlideClass);var s=void 0,o=void 0,l=void 0,d=void 0,c=void 0,u=void 0,p=void 0,h=void 0,f=void 0,m=void 0,v=void 0,g=void 0,y=void 0,b=void 0,w=void 0,x=void 0;o=void 0===r.touchesStart.x&&e?(s="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,"touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(s=r.touchesStart.x,r.touchesStart.y),n.scale=a.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,n.currentScale=a.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,e?(w=a.$slideEl[0].offsetWidth,x=a.$slideEl[0].offsetHeight,l=a.$slideEl.offset().left+w/2-s,d=a.$slideEl.offset().top+x/2-o,p=a.$imageEl[0].offsetWidth,h=a.$imageEl[0].offsetHeight,f=p*n.scale,m=h*n.scale,y=-(v=Math.min(w/2-f/2,0)),b=-(g=Math.min(x/2-m/2,0)),(c=l*n.scale)<v&&(c=v),y<c&&(c=y),(u=d*n.scale)<g&&(u=g),b<u&&(u=b)):u=c=0,a.$imageWrapEl.transition(300).transform("translate3d("+c+"px, "+u+"px,0)"),a.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+n.scale+")")}},out:function(){var e=this,t=e.zoom,n=e.params.zoom,i=t.gesture;i.$slideEl||(i.$slideEl=e.clickedSlide?(0,A.$)(e.clickedSlide):e.slides.eq(e.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas"),i.$imageWrapEl=i.$imageEl.parent("."+n.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+n.zoomedSlideClass),i.$slideEl=void 0)},enable:function(){var e=this,t=e.zoom;if(!t.enabled){t.enabled=!0;var n=!("touchstart"!==e.touchEvents.start||!V.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1};V.gestures?(e.$wrapperEl.on("gesturestart",".swiper-slide",t.onGestureStart,n),e.$wrapperEl.on("gesturechange",".swiper-slide",t.onGestureChange,n),e.$wrapperEl.on("gestureend",".swiper-slide",t.onGestureEnd,n)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,".swiper-slide",t.onGestureStart,n),e.$wrapperEl.on(e.touchEvents.move,".swiper-slide",t.onGestureChange,n),e.$wrapperEl.on(e.touchEvents.end,".swiper-slide",t.onGestureEnd,n)),e.$wrapperEl.on(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove)}},disable:function(){var e=this,t=e.zoom;if(t.enabled){e.zoom.enabled=!1;var n=!("touchstart"!==e.touchEvents.start||!V.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1};V.gestures?(e.$wrapperEl.off("gesturestart",".swiper-slide",t.onGestureStart,n),e.$wrapperEl.off("gesturechange",".swiper-slide",t.onGestureChange,n),e.$wrapperEl.off("gestureend",".swiper-slide",t.onGestureEnd,n)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,".swiper-slide",t.onGestureStart,n),e.$wrapperEl.off(e.touchEvents.move,".swiper-slide",t.onGestureChange,n),e.$wrapperEl.off(e.touchEvents.end,".swiper-slide",t.onGestureEnd,n)),e.$wrapperEl.off(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove)}}},Z={loadInSlide:function(e){var l=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],d=this,c=d.params.lazy;if(void 0!==e&&0!==d.slides.length){var u=d.virtual&&d.params.virtual.enabled?d.$wrapperEl.children("."+d.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):d.slides.eq(e),t=u.find("."+c.elementClass+":not(."+c.loadedClass+"):not(."+c.loadingClass+")");!u.hasClass(c.elementClass)||u.hasClass(c.loadedClass)||u.hasClass(c.loadingClass)||(t=t.add(u[0])),0!==t.length&&t.each(function(e,t){var i=(0,A.$)(t);i.addClass(c.loadingClass);var a=i.attr("data-background"),r=i.attr("data-src"),s=i.attr("data-srcset"),o=i.attr("data-sizes");d.loadImage(i[0],r||a,s,o,!1,function(){if(null!=d&&d&&(!d||d.params)&&!d.destroyed){if(a?(i.css("background-image",'url("'+a+'")'),i.removeAttr("data-background")):(s&&(i.attr("srcset",s),i.removeAttr("data-srcset")),o&&(i.attr("sizes",o),i.removeAttr("data-sizes")),r&&(i.attr("src",r),i.removeAttr("data-src"))),i.addClass(c.loadedClass).removeClass(c.loadingClass),u.find("."+c.preloaderClass).remove(),d.params.loop&&l){var e=u.attr("data-swiper-slide-index");if(u.hasClass(d.params.slideDuplicateClass)){var t=d.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+d.params.slideDuplicateClass+")");d.lazy.loadInSlide(t.index(),!1)}else{var n=d.$wrapperEl.children("."+d.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');d.lazy.loadInSlide(n.index(),!1)}}d.emit("lazyImageReady",u[0],i[0])}}),d.emit("lazyImageLoad",u[0],i[0])})}},load:function(){var i=this,t=i.$wrapperEl,n=i.params,a=i.slides,e=i.activeIndex,r=i.virtual&&n.virtual.enabled,s=n.lazy,o=n.slidesPerView;function l(e){if(r){if(t.children("."+n.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return!0}else if(a[e])return!0;return!1}function d(e){return r?(0,A.$)(e).attr("data-swiper-slide-index"):(0,A.$)(e).index()}if("auto"===o&&(o=0),i.lazy.initialImageLoaded||(i.lazy.initialImageLoaded=!0),i.params.watchSlidesVisibility)t.children("."+n.slideVisibleClass).each(function(e,t){var n=r?(0,A.$)(t).attr("data-swiper-slide-index"):(0,A.$)(t).index();i.lazy.loadInSlide(n)});else if(1<o)for(var c=e;c<e+o;c+=1)l(c)&&i.lazy.loadInSlide(c);else i.lazy.loadInSlide(e);if(s.loadPrevNext)if(1<o||s.loadPrevNextAmount&&1<s.loadPrevNextAmount){for(var u=s.loadPrevNextAmount,p=o,h=Math.min(e+p+Math.max(u,p),a.length),f=Math.max(e-Math.max(p,u),0),m=e+o;m<h;m+=1)l(m)&&i.lazy.loadInSlide(m);for(var v=f;v<e;v+=1)l(v)&&i.lazy.loadInSlide(v)}else{var g=t.children("."+n.slideNextClass);0<g.length&&i.lazy.loadInSlide(d(g));var y=t.children("."+n.slidePrevClass);0<y.length&&i.lazy.loadInSlide(d(y))}}},U={LinearSpline:function(e,t){var n,i,a,r=(a=i=n=void 0,function(e,t){for(i=-1,n=e.length;1<n-i;)e[a=n+i>>1]<=t?i=a:n=a;return n});this.x=e,this.y=t,this.lastIndex=e.length-1;var s=void 0,o=void 0;return this.interpolate=function(e){return e?(o=r(this.x,e),s=o-1,(e-this.x[s])*(this.y[o]-this.y[s])/(this.x[o]-this.x[s])+this.y[s]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new U.LinearSpline(t.slidesGrid,e.slidesGrid):new U.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var n=this,i=n.controller.control,a=void 0,r=void 0;function s(e){var t=n.rtlTranslate?-n.translate:n.translate;"slide"===n.params.controller.by&&(n.controller.getInterpolateFunction(e),r=-n.controller.spline.interpolate(-t)),r&&"container"!==n.params.controller.by||(a=(e.maxTranslate()-e.minTranslate())/(n.maxTranslate()-n.minTranslate()),r=(t-n.minTranslate())*a+e.minTranslate()),n.params.controller.inverse&&(r=e.maxTranslate()-r),e.updateProgress(r),e.setTranslate(r,n),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(i))for(var o=0;o<i.length;o+=1)i[o]!==t&&i[o]instanceof k&&s(i[o]);else i instanceof k&&t!==i&&s(i)},setTransition:function(t,e){var n=this,i=n.controller.control,a=void 0;function r(e){e.setTransition(t,n),0!==t&&(e.transitionStart(),e.params.autoHeight&&R.nextTick(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){i&&(e.params.loop&&"slide"===n.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(i))for(a=0;a<i.length;a+=1)i[a]!==e&&i[a]instanceof k&&r(i[a]);else i instanceof k&&e!==i&&r(i)}},K={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this,n=t.params.a11y;if(13===e.keyCode){var i=(0,A.$)(e.target);t.navigation&&t.navigation.$nextEl&&i.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(n.lastSlideMessage):t.a11y.notify(n.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&i.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(n.firstSlideMessage):t.a11y.notify(n.prevSlideMessage)),t.pagination&&i.is("."+t.params.pagination.bulletClass)&&i[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop){var t=e.navigation,n=t.$nextEl,i=t.$prevEl;i&&0<i.length&&(e.isBeginning?e.a11y.disableEl(i):e.a11y.enableEl(i)),n&&0<n.length&&(e.isEnd?e.a11y.disableEl(n):e.a11y.enableEl(n))}},updatePagination:function(){var i=this,a=i.params.a11y;i.pagination&&i.params.pagination.clickable&&i.pagination.bullets&&i.pagination.bullets.length&&i.pagination.bullets.each(function(e,t){var n=(0,A.$)(t);i.a11y.makeElFocusable(n),i.a11y.addElRole(n,"button"),i.a11y.addElLabel(n,a.paginationBulletMessage.replace(/{{index}}/,n.index()+1))})},init:function(){var e=this;e.$el.append(e.a11y.liveRegion);var t=e.params.a11y,n=void 0,i=void 0;e.navigation&&e.navigation.$nextEl&&(n=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),n&&(e.a11y.makeElFocusable(n),e.a11y.addElRole(n,"button"),e.a11y.addElLabel(n,t.nextSlideMessage),n.on("keydown",e.a11y.onEnterKey)),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,t.prevSlideMessage),i.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy:function(){var e=this;e.a11y.liveRegion&&0<e.a11y.liveRegion.length&&e.a11y.liveRegion.remove();var t=void 0,n=void 0;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(n=e.navigation.$prevEl),t&&t.off("keydown",e.a11y.onEnterKey),n&&n.off("keydown",e.a11y.onEnterKey),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.off("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)}},J={init:function(){var e=this;if(e.params.history){if(!G.window.history||!G.window.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var t=e.history;t.initialized=!0,t.paths=J.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||G.window.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||G.window.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=J.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=G.window.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){if(this.history.initialized&&this.params.history.enabled){var n=this.slides.eq(t),i=J.slugify(n.attr("data-history"));G.window.location.pathname.includes(e)||(i=e+"/"+i);var a=G.window.history.state;a&&a.value===i||(this.params.history.replaceState?G.window.history.replaceState({value:i},null,i):G.window.history.pushState({value:i},null,i))}},slugify:function(e){return e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,n){var i=this;if(t)for(var a=0,r=i.slides.length;a<r;a+=1){var s=i.slides.eq(a);if(J.slugify(s.attr("data-history"))===t&&!s.hasClass(i.params.slideDuplicateClass)){var o=s.index();i.slideTo(o,e,n)}}else i.slideTo(0,e,n)}},Q={onHashCange:function(){var e=this,t=G.document.location.hash.replace("#","");if(t!==e.slides.eq(e.activeIndex).attr("data-hash")){var n=e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+t+'"]').index();if(void 0===n)return;e.slideTo(n)}},setHash:function(){var e=this;if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&G.window.history&&G.window.history.replaceState)G.window.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||!1);else{var t=e.slides.eq(e.activeIndex),n=t.attr("data-hash")||t.attr("data-history");G.document.location.hash=n||""}},init:function(){var e=this;if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var t=G.document.location.hash.replace("#","");if(t)for(var n=0,i=e.slides.length;n<i;n+=1){var a=e.slides.eq(n);if((a.attr("data-hash")||a.attr("data-history"))===t&&!a.hasClass(e.params.slideDuplicateClass)){var r=a.index();e.slideTo(r,0,e.params.runCallbacksOnInit,!0)}}e.params.hashNavigation.watchState&&(0,A.$)(G.window).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&(0,A.$)(G.window).off("hashchange",this.hashNavigation.onHashCange)}},ee={run:function(){var e=this,t=e.slides.eq(e.activeIndex),n=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(n=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),e.autoplay.timeout=R.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},n)},start:function(){var e=this;return void 0===e.autoplay.timeout&&(!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0))},stop:function(){var e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}},te={setTranslate:function(){for(var e=this,t=e.slides,n=0;n<t.length;n+=1){var i=e.slides.eq(n),a=-i[0].swiperSlideOffset;e.params.virtualTranslate||(a-=e.translate);var r=0;e.isHorizontal()||(r=a,a=0);var s=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:s}).transform("translate3d("+a+"px, "+r+"px, 0px)")}},setTransition:function(e){var n=this,t=n.slides,i=n.$wrapperEl;if(t.transition(e),n.params.virtualTranslate&&0!==e){var a=!1;t.transitionEnd(function(){if(!a&&n&&!n.destroyed){a=!0,n.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)i.trigger(e[t])}})}}},ne={setTranslate:function(){var e=this,t=e.$el,n=e.$wrapperEl,i=e.slides,a=e.width,r=e.height,s=e.rtlTranslate,o=e.size,l=e.params.cubeEffect,d=e.isHorizontal(),c=e.virtual&&e.params.virtual.enabled,u=0,p=void 0;l.shadow&&(d?(0===(p=n.find(".swiper-cube-shadow")).length&&(p=(0,A.$)('<div class="swiper-cube-shadow"></div>'),n.append(p)),p.css({height:a+"px"})):0===(p=t.find(".swiper-cube-shadow")).length&&(p=(0,A.$)('<div class="swiper-cube-shadow"></div>'),t.append(p)));for(var h=0;h<i.length;h+=1){var f=i.eq(h),m=h;c&&(m=parseInt(f.attr("data-swiper-slide-index"),10));var v=90*m,g=Math.floor(v/360);s&&(v=-v,g=Math.floor(-v/360));var y=Math.max(Math.min(f[0].progress,1),-1),b=0,w=0,x=0;m%4==0?(b=4*-g*o,x=0):(m-1)%4==0?(b=0,x=4*-g*o):(m-2)%4==0?(b=o+4*g*o,x=o):(m-3)%4==0&&(b=-o,x=3*o+4*o*g),s&&(b=-b),d||(w=b,b=0);var T="rotateX("+(d?0:-v)+"deg) rotateY("+(d?v:0)+"deg) translate3d("+b+"px, "+w+"px, "+x+"px)";if(y<=1&&-1<y&&(u=90*m+90*y,s&&(u=90*-m-90*y)),f.transform(T),l.slideShadows){var E=d?f.find(".swiper-slide-shadow-left"):f.find(".swiper-slide-shadow-top"),S=d?f.find(".swiper-slide-shadow-right"):f.find(".swiper-slide-shadow-bottom");0===E.length&&(E=(0,A.$)('<div class="swiper-slide-shadow-'+(d?"left":"top")+'"></div>'),f.append(E)),0===S.length&&(S=(0,A.$)('<div class="swiper-slide-shadow-'+(d?"right":"bottom")+'"></div>'),f.append(S)),E.length&&(E[0].style.opacity=Math.max(-y,0)),S.length&&(S[0].style.opacity=Math.max(y,0))}}if(n.css({"-webkit-transform-origin":"50% 50% -"+o/2+"px","-moz-transform-origin":"50% 50% -"+o/2+"px","-ms-transform-origin":"50% 50% -"+o/2+"px","transform-origin":"50% 50% -"+o/2+"px"}),l.shadow)if(d)p.transform("translate3d(0px, "+(a/2+l.shadowOffset)+"px, "+-a/2+"px) rotateX(90deg) rotateZ(0deg) scale("+l.shadowScale+")");else{var C=Math.abs(u)-90*Math.floor(Math.abs(u)/90),$=1.5-(Math.sin(2*C*Math.PI/360)/2+Math.cos(2*C*Math.PI/360)/2),k=l.shadowScale,M=l.shadowScale/$,P=l.shadowOffset;p.transform("scale3d("+k+", 1, "+M+") translate3d(0px, "+(r/2+P)+"px, "+-r/2/M+"px) rotateX(-90deg)")}var z=I.isSafari||I.isUiWebView?-o/2:0;n.transform("translate3d(0px,0,"+z+"px) rotateX("+(e.isHorizontal()?0:u)+"deg) rotateY("+(e.isHorizontal()?-u:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},ie={setTranslate:function(){for(var e=this,t=e.slides,n=e.rtlTranslate,i=0;i<t.length;i+=1){var a=t.eq(i),r=a[0].progress;e.params.flipEffect.limitRotation&&(r=Math.max(Math.min(a[0].progress,1),-1));var s=-180*r,o=0,l=-a[0].swiperSlideOffset,d=0;if(e.isHorizontal()?n&&(s=-s):(d=l,o=-s,s=l=0),a[0].style.zIndex=-Math.abs(Math.round(r))+t.length,e.params.flipEffect.slideShadows){var c=e.isHorizontal()?a.find(".swiper-slide-shadow-left"):a.find(".swiper-slide-shadow-top"),u=e.isHorizontal()?a.find(".swiper-slide-shadow-right"):a.find(".swiper-slide-shadow-bottom");0===c.length&&(c=(0,A.$)('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"left":"top")+'"></div>'),a.append(c)),0===u.length&&(u=(0,A.$)('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"right":"bottom")+'"></div>'),a.append(u)),c.length&&(c[0].style.opacity=Math.max(-r,0)),u.length&&(u[0].style.opacity=Math.max(r,0))}a.transform("translate3d("+l+"px, "+d+"px, 0px) rotateX("+o+"deg) rotateY("+s+"deg)")}},setTransition:function(e){var n=this,t=n.slides,i=n.activeIndex,a=n.$wrapperEl;if(t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),n.params.virtualTranslate&&0!==e){var r=!1;t.eq(i).transitionEnd(function(){if(!r&&n&&!n.destroyed){r=!0,n.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)a.trigger(e[t])}})}}},ae={setTranslate:function(){for(var e=this,t=e.width,n=e.height,i=e.slides,a=e.$wrapperEl,r=e.slidesSizesGrid,s=e.params.coverflowEffect,o=e.isHorizontal(),l=e.translate,d=o?t/2-l:n/2-l,c=o?s.rotate:-s.rotate,u=s.depth,p=0,h=i.length;p<h;p+=1){var f=i.eq(p),m=r[p],v=(d-f[0].swiperSlideOffset-m/2)/m*s.modifier,g=o?c*v:0,y=o?0:c*v,b=-u*Math.abs(v),w=o?0:s.stretch*v,x=o?s.stretch*v:0;Math.abs(x)<.001&&(x=0),Math.abs(w)<.001&&(w=0),Math.abs(b)<.001&&(b=0),Math.abs(g)<.001&&(g=0),Math.abs(y)<.001&&(y=0);var T="translate3d("+x+"px,"+w+"px,"+b+"px)  rotateX("+y+"deg) rotateY("+g+"deg)";if(f.transform(T),f[0].style.zIndex=1-Math.abs(Math.round(v)),s.slideShadows){var E=o?f.find(".swiper-slide-shadow-left"):f.find(".swiper-slide-shadow-top"),S=o?f.find(".swiper-slide-shadow-right"):f.find(".swiper-slide-shadow-bottom");0===E.length&&(E=(0,A.$)('<div class="swiper-slide-shadow-'+(o?"left":"top")+'"></div>'),f.append(E)),0===S.length&&(S=(0,A.$)('<div class="swiper-slide-shadow-'+(o?"right":"bottom")+'"></div>'),f.append(S)),E.length&&(E[0].style.opacity=0<v?v:0),S.length&&(S[0].style.opacity=0<-v?-v:0)}}(V.pointerEvents||V.prefixedPointerEvents)&&(a[0].style.perspectiveOrigin=d+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},re={init:function(){var e=this,t=e.params.thumbs,n=e.constructor;t.swiper instanceof n?(e.thumbs.swiper=t.swiper,R.extend(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),R.extend(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):R.isObject(t.swiper)&&(e.thumbs.swiper=new n(R.extend({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick)},onThumbClick:function(){var e=this,t=e.thumbs.swiper;if(t){var n=t.clickedIndex,i=t.clickedSlide;if(!(i&&(0,A.$)(i).hasClass(e.params.thumbs.slideThumbActiveClass)||null==n)){var a=void 0;if(a=t.params.loop?parseInt((0,A.$)(t.clickedSlide).attr("data-swiper-slide-index"),10):n,e.params.loop){var r=e.activeIndex;e.slides.eq(r).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,r=e.activeIndex);var s=e.slides.eq(r).prevAll('[data-swiper-slide-index="'+a+'"]').eq(0).index(),o=e.slides.eq(r).nextAll('[data-swiper-slide-index="'+a+'"]').eq(0).index();a=void 0===s?o:void 0===o?s:o-r<r-s?o:s}e.slideTo(a)}}},update:function(e){var t=this,n=t.thumbs.swiper;if(n){var i="auto"===n.params.slidesPerView?n.slidesPerViewDynamic():n.params.slidesPerView;if(t.realIndex!==n.realIndex){var a=n.activeIndex,r=void 0;if(n.params.loop){n.slides.eq(a).hasClass(n.params.slideDuplicateClass)&&(n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft,a=n.activeIndex);var s=n.slides.eq(a).prevAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),o=n.slides.eq(a).nextAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index();r=void 0===s?o:void 0===o?s:o-a==a-s?a:o-a<a-s?o:s}else r=t.realIndex;n.visibleSlidesIndexes.indexOf(r)<0&&(n.params.centeredSlides?r=a<r?r-Math.floor(i/2)+1:r+Math.floor(i/2)-1:a<r&&(r=r-i+1),n.slideTo(r,e?0:void 0))}var l=1,d=t.params.thumbs.slideThumbActiveClass;if(1<t.params.slidesPerView&&!t.params.centeredSlides&&(l=t.params.slidesPerView),n.slides.removeClass(d),n.params.loop)for(var c=0;c<l;c+=1)n.$wrapperEl.children('[data-swiper-slide-index="'+(t.realIndex+c)+'"]').addClass(d);else for(var u=0;u<l;u+=1)n.slides.eq(t.realIndex+u).addClass(d)}}},se=[M,P,z,L,D,N,F,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){var e=this;R.extend(e,{mousewheel:{enabled:!1,enable:B.enable.bind(e),disable:B.disable.bind(e),handle:B.handle.bind(e),handleMouseEnter:B.handleMouseEnter.bind(e),handleMouseLeave:B.handleMouseLeave.bind(e),lastScrollTime:R.now()}})},on:{init:function(){this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){var e=this;R.extend(e,{navigation:{init:X.init.bind(e),update:X.update.bind(e),destroy:X.destroy.bind(e),onNextClick:X.onNextClick.bind(e),onPrevClick:X.onPrevClick.bind(e)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t=this.navigation,n=t.$nextEl,i=t.$prevEl;!this.params.navigation.hideOnClick||(0,A.$)(e.target).is(i)||(0,A.$)(e.target).is(n)||(n&&n.toggleClass(this.params.navigation.hiddenClass),i&&i.toggleClass(this.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){var e=this;R.extend(e,{pagination:{init:q.init.bind(e),render:q.render.bind(e),update:q.update.bind(e),destroy:q.destroy.bind(e),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){this.params.loop?this.pagination.update():void 0===this.snapIndex&&this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){var t=this;t.params.pagination.el&&t.params.pagination.hideOnClick&&0<t.pagination.$el.length&&!(0,A.$)(e.target).hasClass(t.params.pagination.bulletClass)&&t.pagination.$el.toggleClass(t.params.pagination.hiddenClass)}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){var e=this;R.extend(e,{scrollbar:{init:Y.init.bind(e),destroy:Y.destroy.bind(e),updateSize:Y.updateSize.bind(e),setTranslate:Y.setTranslate.bind(e),setTransition:Y.setTransition.bind(e),enableDraggable:Y.enableDraggable.bind(e),disableDraggable:Y.disableDraggable.bind(e),setDragPosition:Y.setDragPosition.bind(e),onDragStart:Y.onDragStart.bind(e),onDragMove:Y.onDragMove.bind(e),onDragEnd:Y.onDragEnd.bind(e),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){R.extend(this,{parallax:{setTransform:W.setTransform.bind(this),setTranslate:W.setTranslate.bind(this),setTransition:W.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init:function(){this.params.parallax&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var i=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(e){t[e]=_[e].bind(i)}),R.extend(i,{zoom:t});var a=1;Object.defineProperty(i.zoom,"scale",{get:function(){return a},set:function(e){if(a!==e){var t=i.zoom.gesture.$imageEl?i.zoom.gesture.$imageEl[0]:void 0,n=i.zoom.gesture.$slideEl?i.zoom.gesture.$slideEl[0]:void 0;i.emit("zoomChange",e,t,n)}a=e}})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){R.extend(this,{lazy:{initialImageLoaded:!1,load:Z.load.bind(this),loadInSlide:Z.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){var e=this;e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){var e=this;R.extend(e,{controller:{control:e.params.controller.control,getInterpolateFunction:U.getInterpolateFunction.bind(e),setTranslate:U.setTranslate.bind(e),setTransition:U.setTransition.bind(e)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;R.extend(t,{a11y:{liveRegion:(0,A.$)('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(K).forEach(function(e){t.a11y[e]=K[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){var e=this;R.extend(e,{history:{init:J.init.bind(e),setHistory:J.setHistory.bind(e),setHistoryPopState:J.setHistoryPopState.bind(e),scrollToSlide:J.scrollToSlide.bind(e),destroy:J.destroy.bind(e)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){var e=this;R.extend(e,{hashNavigation:{initialized:!1,init:Q.init.bind(e),destroy:Q.destroy.bind(e),setHash:Q.setHash.bind(e),onHashCange:Q.onHashCange.bind(e)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var t=this;R.extend(t,{autoplay:{running:!1,paused:!1,run:ee.run.bind(t),start:ee.start.bind(t),stop:ee.stop.bind(t),pause:ee.pause.bind(t),onTransitionEnd:function(e){t&&!t.destroyed&&t.$wrapperEl&&e.target===this&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&this.autoplay.start()},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},destroy:function(){this.autoplay.running&&this.autoplay.stop()}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){R.extend(this,{fadeEffect:{setTranslate:te.setTranslate.bind(this),setTransition:te.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;if("fade"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"fade");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};R.extend(e.params,t),R.extend(e.originalParams,t)}},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){R.extend(this,{cubeEffect:{setTranslate:ne.setTranslate.bind(this),setTransition:ne.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;if("cube"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"cube"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};R.extend(e.params,t),R.extend(e.originalParams,t)}},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){R.extend(this,{flipEffect:{setTranslate:ie.setTranslate.bind(this),setTransition:ie.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;if("flip"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"flip"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};R.extend(e.params,t),R.extend(e.originalParams,t)}},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){R.extend(this,{coverflowEffect:{setTranslate:ae.setTranslate.bind(this),setTransition:ae.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){R.extend(this,{thumbs:{swiper:null,init:re.init.bind(this),update:re.update.bind(this),onThumbClick:re.onThumbClick.bind(this)}})},on:{beforeInit:function(){var e=this.params.thumbs;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange:function(){this.thumbs.swiper&&this.thumbs.update()},update:function(){this.thumbs.swiper&&this.thumbs.update()},resize:function(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate:function(){this.thumbs.swiper&&this.thumbs.update()},setTransition:function(e){var t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy:function(){var e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];void 0===k.use&&(k.use=k.Class.use,k.installModule=k.Class.installModule),k.use(se),t.default=k},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.scroll=t.resize=t.touchmove=t.touchend=t.touchstart=t.mouseover=t.mouseout=t.mouseleave=t.mouseenter=t.mouseup=t.mousemove=t.mousedown=t.change=t.submit=t.keypress=t.keydown=t.keyup=t.focusout=t.focusin=t.focus=t.blur=t.click=t.stop=t.animate=t.scrollLeft=t.scrollTop=t.scrollTo=t.empty=t.add=t.detach=t.remove=t.children=t.find=t.closest=t.parents=t.parent=t.siblings=t.prevAll=t.prev=t.nextAll=t.next=t.insertAfter=t.insertBefore=t.prependTo=t.prepend=t.appendTo=t.append=t.eq=t.index=t.indexOf=t.is=t.text=t.html=t.map=t.filter=t.forEach=t.each=t.toArray=t.css=t.styles=t.show=t.hide=t.offset=t.outerHeight=t.height=t.outerWidth=t.width=t.animationEnd=t.transitionEnd=t.trigger=t.once=t.off=t.on=t.transition=t.transform=t.val=t.dataset=t.removeData=t.data=t.prop=t.removeAttr=t.attr=t.toggleClass=t.hasClass=t.removeClass=t.addClass=t.$=void 0;var y=n(1);var l=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);for(var n=0;n<t.length;n+=1)this[n]=t[n];return this.length=t.length,this};function m(e,t){var n=[],i=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){var a=void 0,r=void 0,s=e.trim();if(0<=s.indexOf("<")&&0<=s.indexOf(">")){var o="div";for(0===s.indexOf("<li")&&(o="ul"),0===s.indexOf("<tr")&&(o="tbody"),0!==s.indexOf("<td")&&0!==s.indexOf("<th")||(o="tr"),0===s.indexOf("<tbody")&&(o="table"),0===s.indexOf("<option")&&(o="select"),(r=y.document.createElement(o)).innerHTML=s,i=0;i<r.childNodes.length;i+=1)n.push(r.childNodes[i])}else for(a=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||y.document).querySelectorAll(e.trim()):[y.document.getElementById(e.trim().split("#")[1])],i=0;i<a.length;i+=1)a[i]&&n.push(a[i])}else if(e.nodeType||e===y.window||e===y.document)n.push(e);else if(0<e.length&&e[0].nodeType)for(i=0;i<e.length;i+=1)n.push(e[i]);return new l(n)}function r(e){for(var t=[],n=0;n<e.length;n+=1)-1===t.indexOf(e[n])&&t.push(e[n]);return t}function b(e){return y.window.requestAnimationFrame?y.window.requestAnimationFrame(e):y.window.webkitRequestAnimationFrame?y.window.webkitRequestAnimationFrame(e):y.window.setTimeout(e,1e3/60)}m.fn=l.prototype,m.Class=l,m.Dom7=l;var s="resize scroll".split(" ");function i(e){for(var t=arguments.length,n=Array(1<t?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];if(void 0!==n[0])return this.on.apply(this,[e].concat(n));for(var a=0;a<this.length;a+=1)s.indexOf(e)<0&&(e in this[a]?this[a][e]():m(this[a]).trigger(e));return this}t.$=m,t.addClass=function(e){if(void 0===e)return this;for(var t=e.split(" "),n=0;n<t.length;n+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.add(t[n]);return this},t.removeClass=function(e){for(var t=e.split(" "),n=0;n<t.length;n+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.remove(t[n]);return this},t.hasClass=function(e){return!!this[0]&&this[0].classList.contains(e)},t.toggleClass=function(e){for(var t=e.split(" "),n=0;n<t.length;n+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.toggle(t[n]);return this},t.attr=function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(e,t);else for(var i in e)this[n][i]=e[i],this[n].setAttribute(i,e[i]);return this},t.removeAttr=function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},t.prop=function(e,t){if(1!==arguments.length||"string"!=typeof e){for(var n=0;n<this.length;n+=1)if(2===arguments.length)this[n][e]=t;else for(var i in e)this[n][i]=e[i];return this}if(this[0])return this[0][e]},t.data=function(e,t){var n=void 0;if(void 0!==t){for(var i=0;i<this.length;i+=1)(n=this[i]).dom7ElementDataStorage||(n.dom7ElementDataStorage={}),n.dom7ElementDataStorage[e]=t;return this}if(n=this[0]){if(n.dom7ElementDataStorage&&e in n.dom7ElementDataStorage)return n.dom7ElementDataStorage[e];var a=n.getAttribute("data-"+e);return a||void 0}},t.removeData=function(e){for(var t=0;t<this.length;t+=1){var n=this[t];n.dom7ElementDataStorage&&n.dom7ElementDataStorage[e]&&(n.dom7ElementDataStorage[e]=null,delete n.dom7ElementDataStorage[e])}},t.dataset=function(){var e=this[0];if(e){var t,n={};if(e.dataset)for(var i in e.dataset)n[i]=e.dataset[i];else for(var a=0;a<e.attributes.length;a+=1){var r=e.attributes[a];0<=r.name.indexOf("data-")&&(n[(t=r.name.split("data-")[1],t.toLowerCase().replace(/-(.)/g,function(e,t){return t.toUpperCase()}))]=r.value)}for(var s in n)"false"===n[s]?n[s]=!1:"true"===n[s]?n[s]=!0:parseFloat(n[s])===1*n[s]&&(n[s]*=1);return n}},t.val=function(e){var t=this;if(void 0!==e){for(var n=0;n<t.length;n+=1){var i=t[n];if(Array.isArray(e)&&i.multiple&&"select"===i.nodeName.toLowerCase())for(var a=0;a<i.options.length;a+=1)i.options[a].selected=0<=e.indexOf(i.options[a].value);else i.value=e}return t}if(t[0]){if(t[0].multiple&&"select"===t[0].nodeName.toLowerCase()){for(var r=[],s=0;s<t[0].selectedOptions.length;s+=1)r.push(t[0].selectedOptions[s].value);return r}return t[0].value}},t.transform=function(e){for(var t=0;t<this.length;t+=1){var n=this[t].style;n.webkitTransform=e,n.transform=e}return this},t.transition=function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var n=this[t].style;n.webkitTransitionDuration=e,n.transitionDuration=e}return this},t.on=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=t[0],r=t[1],s=t[2],a=t[3];function o(e){var t=e.target;if(t){var n=e.target.dom7EventData||[];if(n.indexOf(e)<0&&n.unshift(e),m(t).is(r))s.apply(t,n);else for(var i=m(t).parents(),a=0;a<i.length;a+=1)m(i[a]).is(r)&&s.apply(i[a],n)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),s.apply(this,t)}"function"==typeof t[1]&&(i=t[0],s=t[1],a=t[2],r=void 0),a||(a=!1);for(var d=i.split(" "),c=void 0,u=0;u<this.length;u+=1){var p=this[u];if(r)for(c=0;c<d.length;c+=1){var h=d[c];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[h]||(p.dom7LiveListeners[h]=[]),p.dom7LiveListeners[h].push({listener:s,proxyListener:o}),p.addEventListener(h,o,a)}else for(c=0;c<d.length;c+=1){var f=d[c];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[f]||(p.dom7Listeners[f]=[]),p.dom7Listeners[f].push({listener:s,proxyListener:l}),p.addEventListener(f,l,a)}}return this},t.off=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=t[0],a=t[1],r=t[2],s=t[3];"function"==typeof t[1]&&(i=t[0],r=t[1],s=t[2],a=void 0),s||(s=!1);for(var o=i.split(" "),l=0;l<o.length;l+=1)for(var d=o[l],c=0;c<this.length;c+=1){var u=this[c],p=void 0;if(!a&&u.dom7Listeners?p=u.dom7Listeners[d]:a&&u.dom7LiveListeners&&(p=u.dom7LiveListeners[d]),p&&p.length)for(var h=p.length-1;0<=h;h-=1){var f=p[h];r&&f.listener===r?(u.removeEventListener(d,f.proxyListener,s),p.splice(h,1)):r||(u.removeEventListener(d,f.proxyListener,s),p.splice(h,1))}}return this},t.once=function(){for(var a=this,e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0],s=t[1],o=t[2],l=t[3];return"function"==typeof t[1]&&(r=t[0],o=t[1],l=t[2],s=void 0),a.on(r,s,function e(){for(var t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];o.apply(this,n),a.off(r,s,e,l)},l)},t.trigger=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];for(var i=t[0].split(" "),a=t[1],r=0;r<i.length;r+=1)for(var s=i[r],o=0;o<this.length;o+=1){var l=this[o],d=void 0;try{d=new y.window.CustomEvent(s,{detail:a,bubbles:!0,cancelable:!0})}catch(e){(d=y.document.createEvent("Event")).initEvent(s,!0,!0),d.detail=a}l.dom7EventData=t.filter(function(e,t){return 0<t}),l.dispatchEvent(d),l.dom7EventData=[],delete l.dom7EventData}return this},t.transitionEnd=function(t){var n=["webkitTransitionEnd","transitionend"],i=this,a=void 0;function r(e){if(e.target===this)for(t.call(this,e),a=0;a<n.length;a+=1)i.off(n[a],r)}if(t)for(a=0;a<n.length;a+=1)i.on(n[a],r);return this},t.animationEnd=function(t){var n=["webkitAnimationEnd","animationend"],i=this,a=void 0;function r(e){if(e.target===this)for(t.call(this,e),a=0;a<n.length;a+=1)i.off(n[a],r)}if(t)for(a=0;a<n.length;a+=1)i.on(n[a],r);return this},t.width=function(){return this[0]===y.window?y.window.innerWidth:0<this.length?parseFloat(this.css("width")):null},t.outerWidth=function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},t.height=function(){return this[0]===y.window?y.window.innerHeight:0<this.length?parseFloat(this.css("height")):null},t.outerHeight=function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},t.offset=function(){if(0<this.length){var e=this[0],t=e.getBoundingClientRect(),n=y.document.body,i=e.clientTop||n.clientTop||0,a=e.clientLeft||n.clientLeft||0,r=e===y.window?y.window.scrollY:e.scrollTop,s=e===y.window?y.window.scrollX:e.scrollLeft;return{top:t.top+r-i,left:t.left+s-a}}return null},t.hide=function(){for(var e=0;e<this.length;e+=1)this[e].style.display="none";return this},t.show=function(){for(var e=0;e<this.length;e+=1){var t=this[e];"none"===t.style.display&&(t.style.display=""),"none"===y.window.getComputedStyle(t,null).getPropertyValue("display")&&(t.style.display="block")}return this},t.styles=function(){return this[0]?y.window.getComputedStyle(this[0],null):{}},t.css=function(e,t){var n=void 0;if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n+=1)for(var i in e)this[n].style[i]=e[i];return this}if(this[0])return y.window.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(n=0;n<this.length;n+=1)this[n].style[e]=t;return this},t.toArray=function(){for(var e=[],t=0;t<this.length;t+=1)e.push(this[t]);return e},t.each=function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},t.forEach=function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],this[t],t))return this;return this},t.filter=function(e){for(var t=[],n=0;n<this.length;n+=1)e.call(this[n],n,this[n])&&t.push(this[n]);return new l(t)},t.map=function(e){for(var t=[],n=0;n<this.length;n+=1)t.push(e.call(this[n],n,this[n]));return new l(t)},t.html=function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},t.text=function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},t.is=function(e){var t=this[0],n=void 0,i=void 0;if(!t||void 0===e)return!1;if("string"==typeof e){if(t.matches)return t.matches(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);for(n=m(e),i=0;i<n.length;i+=1)if(n[i]===t)return!0;return!1}if(e===y.document)return t===y.document;if(e===y.window)return t===y.window;if(e.nodeType||e instanceof l){for(n=e.nodeType?[e]:e,i=0;i<n.length;i+=1)if(n[i]===t)return!0;return!1}return!1},t.indexOf=function(e){for(var t=0;t<this.length;t+=1)if(this[t]===e)return t;return-1},t.index=function(){var e=this[0],t=void 0;if(e){for(t=0;null!==(e=e.previousSibling);)1===e.nodeType&&(t+=1);return t}},t.eq=function(e){if(void 0===e)return this;var t=this.length,n=void 0;return new l(t-1<e?[]:e<0?(n=t+e)<0?[]:[this[n]]:[this[e]])},t.append=function(){for(var e=void 0,t=0;t<arguments.length;t+=1){e=arguments.length<=t?void 0:arguments[t];for(var n=0;n<this.length;n+=1)if("string"==typeof e){var i=y.document.createElement("div");for(i.innerHTML=e;i.firstChild;)this[n].appendChild(i.firstChild)}else if(e instanceof l)for(var a=0;a<e.length;a+=1)this[n].appendChild(e[a]);else this[n].appendChild(e)}return this},t.appendTo=function(e){return m(e).append(this),this},t.prepend=function(e){var t=void 0,n=void 0;for(t=0;t<this.length;t+=1)if("string"==typeof e){var i=y.document.createElement("div");for(i.innerHTML=e,n=i.childNodes.length-1;0<=n;n-=1)this[t].insertBefore(i.childNodes[n],this[t].childNodes[0])}else if(e instanceof l)for(n=0;n<e.length;n+=1)this[t].insertBefore(e[n],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},t.prependTo=function(e){return m(e).prepend(this),this},t.insertBefore=function(e){for(var t=m(e),n=0;n<this.length;n+=1)if(1===t.length)t[0].parentNode.insertBefore(this[n],t[0]);else if(1<t.length)for(var i=0;i<t.length;i+=1)t[i].parentNode.insertBefore(this[n].cloneNode(!0),t[i])},t.insertAfter=function(e){for(var t=m(e),n=0;n<this.length;n+=1)if(1===t.length)t[0].parentNode.insertBefore(this[n],t[0].nextSibling);else if(1<t.length)for(var i=0;i<t.length;i+=1)t[i].parentNode.insertBefore(this[n].cloneNode(!0),t[i].nextSibling)},t.next=function(e){return 0<this.length?e?this[0].nextElementSibling&&m(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},t.nextAll=function(e){var t=[],n=this[0];if(!n)return new l([]);for(;n.nextElementSibling;){var i=n.nextElementSibling;e?m(i).is(e)&&t.push(i):t.push(i),n=i}return new l(t)},t.prev=function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&m(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},t.prevAll=function(e){var t=[],n=this[0];if(!n)return new l([]);for(;n.previousElementSibling;){var i=n.previousElementSibling;e?m(i).is(e)&&t.push(i):t.push(i),n=i}return new l(t)},t.siblings=function(e){return this.nextAll(e).add(this.prevAll(e))},t.parent=function(e){for(var t=[],n=0;n<this.length;n+=1)null!==this[n].parentNode&&(e?m(this[n].parentNode).is(e)&&t.push(this[n].parentNode):t.push(this[n].parentNode));return m(r(t))},t.parents=function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].parentNode;i;)e?m(i).is(e)&&t.push(i):t.push(i),i=i.parentNode;return m(r(t))},t.closest=function(e){var t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},t.find=function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].querySelectorAll(e),a=0;a<i.length;a+=1)t.push(i[a]);return new l(t)},t.children=function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].childNodes,a=0;a<i.length;a+=1)e?1===i[a].nodeType&&m(i[a]).is(e)&&t.push(i[a]):1===i[a].nodeType&&t.push(i[a]);return new l(r(t))},t.remove=function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},t.detach=function(){return this.remove()},t.add=function(){for(var e=void 0,t=void 0,n=arguments.length,i=Array(n),a=0;a<n;a++)i[a]=arguments[a];for(e=0;e<i.length;e+=1){var r=m(i[e]);for(t=0;t<r.length;t+=1)this[this.length]=r[t],this.length+=1}return this},t.empty=function(){for(var e=0;e<this.length;e+=1){var t=this[e];if(1===t.nodeType){for(var n=0;n<t.childNodes.length;n+=1)t.childNodes[n].parentNode&&t.childNodes[n].parentNode.removeChild(t.childNodes[n]);t.textContent=""}}return this},t.scrollTo=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=t[0],a=t[1],m=t[2],v=t[3],g=t[4];return 4===t.length&&"function"==typeof v&&(g=v,i=t[0],a=t[1],m=t[2],g=t[3],v=t[4]),void 0===v&&(v="swing"),this.each(function(){var r=this,s=void 0,o=void 0,e=void 0,t=void 0,l=void 0,d=void 0,c=void 0,u=void 0,p=0<a||0===a,h=0<i||0===i;if(void 0===v&&(v="swing"),p&&(s=r.scrollTop,m||(r.scrollTop=a)),h&&(o=r.scrollLeft,m||(r.scrollLeft=i)),m){p&&(e=r.scrollHeight-r.offsetHeight,l=Math.max(Math.min(a,e),0)),h&&(t=r.scrollWidth-r.offsetWidth,d=Math.max(Math.min(i,t),0));var f=null;p&&l===s&&(p=!1),h&&d===o&&(h=!1),b(function e(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:(new Date).getTime();null===f&&(f=t);var n=Math.max(Math.min((t-f)/m,1),0),i="linear"===v?n:.5-Math.cos(n*Math.PI)/2,a=void 0;p&&(c=s+i*(l-s)),h&&(u=o+i*(d-o)),p&&s<l&&l<=c&&(r.scrollTop=l,a=!0),p&&l<s&&c<=l&&(r.scrollTop=l,a=!0),h&&o<d&&d<=u&&(r.scrollLeft=d,a=!0),h&&d<o&&u<=d&&(r.scrollLeft=d,a=!0),a?g&&g():(p&&(r.scrollTop=c),h&&(r.scrollLeft=u),b(e))})}})},t.scrollTop=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=t[0],a=t[1],r=t[2],s=t[3];return 3===t.length&&"function"==typeof r&&(i=t[0],a=t[1],s=t[2],r=t[3]),void 0===i?0<this.length?this[0].scrollTop:null:this.scrollTo(void 0,i,a,r,s)},t.scrollLeft=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=t[0],a=t[1],r=t[2],s=t[3];return 3===t.length&&"function"==typeof r&&(i=t[0],a=t[1],s=t[2],r=t[3]),void 0===i?0<this.length?this[0].scrollLeft:null:this.scrollTo(i,void 0,a,r,s)},t.animate=function(e,t){var n=this,g={props:Object.assign({},e),params:Object.assign({duration:300,easing:"swing"},t),elements:n,animating:!1,que:[],easingProgress:function(e,t){return"swing"===e?.5-Math.cos(t*Math.PI)/2:"function"==typeof e?e(t):t},stop:function(){var e;g.frameId&&(e=g.frameId,y.window.cancelAnimationFrame?y.window.cancelAnimationFrame(e):y.window.webkitCancelAnimationFrame?y.window.webkitCancelAnimationFrame(e):y.window.clearTimeout(e)),g.animating=!1,g.elements.each(function(e,t){delete t.dom7AnimateInstance}),g.que=[]},done:function(e){if(g.animating=!1,g.elements.each(function(e,t){delete t.dom7AnimateInstance}),e&&e(n),0<g.que.length){var t=g.que.shift();g.animate(t[0],t[1])}},animate:function(d,c){if(g.animating)return g.que.push([d,c]),g;var u=[];g.elements.each(function(t,n){var i=void 0,a=void 0,r=void 0,s=void 0,o=void 0;n.dom7AnimateInstance||(g.elements[t].dom7AnimateInstance=g),u[t]={container:n},Object.keys(d).forEach(function(e){i=y.window.getComputedStyle(n,null).getPropertyValue(e).replace(",","."),a=parseFloat(i),r=i.replace(a,""),s=parseFloat(d[e]),o=d[e]+r,u[t][e]={initialFullValue:i,initialValue:a,unit:r,finalValue:s,finalFullValue:o,currentValue:a}})});var p=null,h=void 0,f=0,m=0,v=void 0,t=!1;return g.animating=!0,g.frameId=b(function e(){h=(new Date).getTime();var o=void 0,l=void 0;t||(t=!0,c.begin&&c.begin(n)),null===p&&(p=h),c.progress&&c.progress(n,Math.max(Math.min((h-p)/c.duration,1),0),p+c.duration-h<0?0:p+c.duration-h,p),u.forEach(function(e){var s=e;v||s.done||Object.keys(d).forEach(function(e){if(!v&&!s.done){o=Math.max(Math.min((h-p)/c.duration,1),0),l=g.easingProgress(c.easing,o);var t=s[e],n=t.initialValue,i=t.finalValue,a=t.unit;s[e].currentValue=n+l*(i-n);var r=s[e].currentValue;(n<i&&i<=r||i<n&&r<=i)&&(s.container.style[e]=i+a,(m+=1)===Object.keys(d).length&&(s.done=!0,f+=1),f===u.length&&(v=!0)),v?g.done(c.complete):s.container.style[e]=r+a}})}),v||(g.frameId=b(e))}),g}};if(0===g.elements.length)return n;for(var i=void 0,a=0;a<g.elements.length;a+=1)g.elements[a].dom7AnimateInstance?i=g.elements[a].dom7AnimateInstance:g.elements[a].dom7AnimateInstance=g;return i||(i=g),"stop"===e?i.stop():i.animate(g.props,g.params),n},t.stop=function(){for(var e=0;e<this.length;e+=1)this[e].dom7AnimateInstance&&this[e].dom7AnimateInstance.stop()},t.click=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["click"].concat(t))},t.blur=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["blur"].concat(t))},t.focus=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["focus"].concat(t))},t.focusin=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["focusin"].concat(t))},t.focusout=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["focusout"].concat(t))},t.keyup=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["keyup"].concat(t))},t.keydown=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["keydown"].concat(t))},t.keypress=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["keypress"].concat(t))},t.submit=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["submit"].concat(t))},t.change=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["change"].concat(t))},t.mousedown=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["mousedown"].concat(t))},t.mousemove=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["mousemove"].concat(t))},t.mouseup=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["mouseup"].concat(t))},t.mouseenter=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["mouseenter"].concat(t))},t.mouseleave=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["mouseleave"].concat(t))},t.mouseout=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["mouseout"].concat(t))},t.mouseover=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["mouseover"].concat(t))},t.touchstart=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["touchstart"].concat(t))},t.touchend=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["touchend"].concat(t))},t.touchmove=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["touchmove"].concat(t))},t.resize=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["resize"].concat(t))},t.scroll=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return i.bind(this).apply(void 0,["scroll"].concat(t))}},function(e,t){e.exports=function(e){function t(e){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",e)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(e):"undefined"!=typeof eval?eval.call(null,e):t("EvalError: No eval function available")}catch(e){t(e)}}},function(e,t){e.exports="/* Zepto v1.2.0 - zepto event ajax form ie - zeptojs.com/license */\n(function(global, factory) {\n  if (typeof define === 'function' && define.amd)\n    define(function() { return factory(global) })\n  else\n    factory(global)\n}(this, function(window) {\n  var Zepto = (function() {\n  var undefined, key, $, classList, emptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter, slice = emptyArray.slice,\n    document = window.document,\n    elementDisplay = {}, classCache = {},\n    cssNumber = { 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1,'opacity': 1, 'z-index': 1, 'zoom': 1 },\n    fragmentRE = /^\\s*<(\\w+|!)[^>]*>/,\n    singleTagRE = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\n    tagExpanderRE = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/ig,\n    rootNodeRE = /^(?:body|html)$/i,\n    capitalRE = /([A-Z])/g,\n\n    // special attributes that should be get/set via method calls\n    methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'],\n\n    adjacencyOperators = [ 'after', 'prepend', 'before', 'append' ],\n    table = document.createElement('table'),\n    tableRow = document.createElement('tr'),\n    containers = {\n      'tr': document.createElement('tbody'),\n      'tbody': table, 'thead': table, 'tfoot': table,\n      'td': tableRow, 'th': tableRow,\n      '*': document.createElement('div')\n    },\n    readyRE = /complete|loaded|interactive/,\n    simpleSelectorRE = /^[\\w-]*$/,\n    class2type = {},\n    toString = class2type.toString,\n    zepto = {},\n    camelize, uniq,\n    tempParent = document.createElement('div'),\n    propMap = {\n      'tabindex': 'tabIndex',\n      'readonly': 'readOnly',\n      'for': 'htmlFor',\n      'class': 'className',\n      'maxlength': 'maxLength',\n      'cellspacing': 'cellSpacing',\n      'cellpadding': 'cellPadding',\n      'rowspan': 'rowSpan',\n      'colspan': 'colSpan',\n      'usemap': 'useMap',\n      'frameborder': 'frameBorder',\n      'contenteditable': 'contentEditable'\n    },\n    isArray = Array.isArray ||\n      function(object){ return object instanceof Array }\n\n  zepto.matches = function(element, selector) {\n    if (!selector || !element || element.nodeType !== 1) return false\n    var matchesSelector = element.matches || element.webkitMatchesSelector ||\n                          element.mozMatchesSelector || element.oMatchesSelector ||\n                          element.matchesSelector\n    if (matchesSelector) return matchesSelector.call(element, selector)\n    // fall back to performing a selector:\n    var match, parent = element.parentNode, temp = !parent\n    if (temp) (parent = tempParent).appendChild(element)\n    match = ~zepto.qsa(parent, selector).indexOf(element)\n    temp && tempParent.removeChild(element)\n    return match\n  }\n\n  function type(obj) {\n    return obj == null ? String(obj) :\n      class2type[toString.call(obj)] || \"object\"\n  }\n\n  function isFunction(value) { return type(value) == \"function\" }\n  function isWindow(obj)     { return obj != null && obj == obj.window }\n  function isDocument(obj)   { return obj != null && obj.nodeType == obj.DOCUMENT_NODE }\n  function isObject(obj)     { return type(obj) == \"object\" }\n  function isPlainObject(obj) {\n    return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype\n  }\n\n  function likeArray(obj) {\n    var length = !!obj && 'length' in obj && obj.length,\n      type = $.type(obj)\n\n    return 'function' != type && !isWindow(obj) && (\n      'array' == type || length === 0 ||\n        (typeof length == 'number' && length > 0 && (length - 1) in obj)\n    )\n  }\n\n  function compact(array) { return filter.call(array, function(item){ return item != null }) }\n  function flatten(array) { return array.length > 0 ? $.fn.concat.apply([], array) : array }\n  camelize = function(str){ return str.replace(/-+(.)?/g, function(match, chr){ return chr ? chr.toUpperCase() : '' }) }\n  function dasherize(str) {\n    return str.replace(/::/g, '/')\n           .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n           .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n           .replace(/_/g, '-')\n           .toLowerCase()\n  }\n  uniq = function(array){ return filter.call(array, function(item, idx){ return array.indexOf(item) == idx }) }\n\n  function classRE(name) {\n    return name in classCache ?\n      classCache[name] : (classCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'))\n  }\n\n  function maybeAddPx(name, value) {\n    return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value\n  }\n\n  function defaultDisplay(nodeName) {\n    var element, display\n    if (!elementDisplay[nodeName]) {\n      element = document.createElement(nodeName)\n      document.body.appendChild(element)\n      display = getComputedStyle(element, '').getPropertyValue(\"display\")\n      element.parentNode.removeChild(element)\n      display == \"none\" && (display = \"block\")\n      elementDisplay[nodeName] = display\n    }\n    return elementDisplay[nodeName]\n  }\n\n  function children(element) {\n    return 'children' in element ?\n      slice.call(element.children) :\n      $.map(element.childNodes, function(node){ if (node.nodeType == 1) return node })\n  }\n\n  function Z(dom, selector) {\n    var i, len = dom ? dom.length : 0\n    for (i = 0; i < len; i++) this[i] = dom[i]\n    this.length = len\n    this.selector = selector || ''\n  }\n\n  // `$.zepto.fragment` takes a html string and an optional tag name\n  // to generate DOM nodes from the given html string.\n  // The generated DOM nodes are returned as an array.\n  // This function can be overridden in plugins for example to make\n  // it compatible with browsers that don't support the DOM fully.\n  zepto.fragment = function(html, name, properties) {\n    var dom, nodes, container\n\n    // A special case optimization for a single tag\n    if (singleTagRE.test(html)) dom = $(document.createElement(RegExp.$1))\n\n    if (!dom) {\n      if (html.replace) html = html.replace(tagExpanderRE, \"<$1></$2>\")\n      if (name === undefined) name = fragmentRE.test(html) && RegExp.$1\n      if (!(name in containers)) name = '*'\n\n      container = containers[name]\n      container.innerHTML = '' + html\n      dom = $.each(slice.call(container.childNodes), function(){\n        container.removeChild(this)\n      })\n    }\n\n    if (isPlainObject(properties)) {\n      nodes = $(dom)\n      $.each(properties, function(key, value) {\n        if (methodAttributes.indexOf(key) > -1) nodes[key](value)\n        else nodes.attr(key, value)\n      })\n    }\n\n    return dom\n  }\n\n  // `$.zepto.Z` swaps out the prototype of the given `dom` array\n  // of nodes with `$.fn` and thus supplying all the Zepto functions\n  // to the array. This method can be overridden in plugins.\n  zepto.Z = function(dom, selector) {\n    return new Z(dom, selector)\n  }\n\n  // `$.zepto.isZ` should return `true` if the given object is a Zepto\n  // collection. This method can be overridden in plugins.\n  zepto.isZ = function(object) {\n    return object instanceof zepto.Z\n  }\n\n  // `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and\n  // takes a CSS selector and an optional context (and handles various\n  // special cases).\n  // This method can be overridden in plugins.\n  zepto.init = function(selector, context) {\n    var dom\n    // If nothing given, return an empty Zepto collection\n    if (!selector) return zepto.Z()\n    // Optimize for string selectors\n    else if (typeof selector == 'string') {\n      selector = selector.trim()\n      // If it's a html fragment, create nodes from it\n      // Note: In both Chrome 21 and Firefox 15, DOM error 12\n      // is thrown if the fragment doesn't begin with <\n      if (selector[0] == '<' && fragmentRE.test(selector))\n        dom = zepto.fragment(selector, RegExp.$1, context), selector = null\n      // If there's a context, create a collection on that context first, and select\n      // nodes from there\n      else if (context !== undefined) return $(context).find(selector)\n      // If it's a CSS selector, use it to select nodes.\n      else dom = zepto.qsa(document, selector)\n    }\n    // If a function is given, call it when the DOM is ready\n    else if (isFunction(selector)) return $(document).ready(selector)\n    // If a Zepto collection is given, just return it\n    else if (zepto.isZ(selector)) return selector\n    else {\n      // normalize array if an array of nodes is given\n      if (isArray(selector)) dom = compact(selector)\n      // Wrap DOM nodes.\n      else if (isObject(selector))\n        dom = [selector], selector = null\n      // If it's a html fragment, create nodes from it\n      else if (fragmentRE.test(selector))\n        dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null\n      // If there's a context, create a collection on that context first, and select\n      // nodes from there\n      else if (context !== undefined) return $(context).find(selector)\n      // And last but no least, if it's a CSS selector, use it to select nodes.\n      else dom = zepto.qsa(document, selector)\n    }\n    // create a new Zepto collection from the nodes found\n    return zepto.Z(dom, selector)\n  }\n\n  // `$` will be the base `Zepto` object. When calling this\n  // function just call `$.zepto.init, which makes the implementation\n  // details of selecting nodes and creating Zepto collections\n  // patchable in plugins.\n  $ = function(selector, context){\n    return zepto.init(selector, context)\n  }\n\n  function extend(target, source, deep) {\n    for (key in source)\n      if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\n        if (isPlainObject(source[key]) && !isPlainObject(target[key]))\n          target[key] = {}\n        if (isArray(source[key]) && !isArray(target[key]))\n          target[key] = []\n        extend(target[key], source[key], deep)\n      }\n      else if (source[key] !== undefined) target[key] = source[key]\n  }\n\n  // Copy all but undefined properties from one or more\n  // objects to the `target` object.\n  $.extend = function(target){\n    var deep, args = slice.call(arguments, 1)\n    if (typeof target == 'boolean') {\n      deep = target\n      target = args.shift()\n    }\n    args.forEach(function(arg){ extend(target, arg, deep) })\n    return target\n  }\n\n  // `$.zepto.qsa` is Zepto's CSS selector implementation which\n  // uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.\n  // This method can be overridden in plugins.\n  zepto.qsa = function(element, selector){\n    var found,\n        maybeID = selector[0] == '#',\n        maybeClass = !maybeID && selector[0] == '.',\n        nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked\n        isSimple = simpleSelectorRE.test(nameOnly)\n    return (element.getElementById && isSimple && maybeID) ? // Safari DocumentFragment doesn't have getElementById\n      ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :\n      (element.nodeType !== 1 && element.nodeType !== 9 && element.nodeType !== 11) ? [] :\n      slice.call(\n        isSimple && !maybeID && element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName\n          maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class\n          element.getElementsByTagName(selector) : // Or a tag\n          element.querySelectorAll(selector) // Or it's not simple, and we need to query all\n      )\n  }\n\n  function filtered(nodes, selector) {\n    return selector == null ? $(nodes) : $(nodes).filter(selector)\n  }\n\n  $.contains = document.documentElement.contains ?\n    function(parent, node) {\n      return parent !== node && parent.contains(node)\n    } :\n    function(parent, node) {\n      while (node && (node = node.parentNode))\n        if (node === parent) return true\n      return false\n    }\n\n  function funcArg(context, arg, idx, payload) {\n    return isFunction(arg) ? arg.call(context, idx, payload) : arg\n  }\n\n  function setAttribute(node, name, value) {\n    value == null ? node.removeAttribute(name) : node.setAttribute(name, value)\n  }\n\n  // access className property while respecting SVGAnimatedString\n  function className(node, value){\n    var klass = node.className || '',\n        svg   = klass && klass.baseVal !== undefined\n\n    if (value === undefined) return svg ? klass.baseVal : klass\n    svg ? (klass.baseVal = value) : (node.className = value)\n  }\n\n  // \"true\"  => true\n  // \"false\" => false\n  // \"null\"  => null\n  // \"42\"    => 42\n  // \"42.5\"  => 42.5\n  // \"08\"    => \"08\"\n  // JSON    => parse if valid\n  // String  => self\n  function deserializeValue(value) {\n    try {\n      return value ?\n        value == \"true\" ||\n        ( value == \"false\" ? false :\n          value == \"null\" ? null :\n          +value + \"\" == value ? +value :\n          /^[\\[\\{]/.test(value) ? $.parseJSON(value) :\n          value )\n        : value\n    } catch(e) {\n      return value\n    }\n  }\n\n  $.type = type\n  $.isFunction = isFunction\n  $.isWindow = isWindow\n  $.isArray = isArray\n  $.isPlainObject = isPlainObject\n\n  $.isEmptyObject = function(obj) {\n    var name\n    for (name in obj) return false\n    return true\n  }\n\n  $.isNumeric = function(val) {\n    var num = Number(val), type = typeof val\n    return val != null && type != 'boolean' &&\n      (type != 'string' || val.length) &&\n      !isNaN(num) && isFinite(num) || false\n  }\n\n  $.inArray = function(elem, array, i){\n    return emptyArray.indexOf.call(array, elem, i)\n  }\n\n  $.camelCase = camelize\n  $.trim = function(str) {\n    return str == null ? \"\" : String.prototype.trim.call(str)\n  }\n\n  // plugin compatibility\n  $.uuid = 0\n  $.support = { }\n  $.expr = { }\n  $.noop = function() {}\n\n  $.map = function(elements, callback){\n    var value, values = [], i, key\n    if (likeArray(elements))\n      for (i = 0; i < elements.length; i++) {\n        value = callback(elements[i], i)\n        if (value != null) values.push(value)\n      }\n    else\n      for (key in elements) {\n        value = callback(elements[key], key)\n        if (value != null) values.push(value)\n      }\n    return flatten(values)\n  }\n\n  $.each = function(elements, callback){\n    var i, key\n    if (likeArray(elements)) {\n      for (i = 0; i < elements.length; i++)\n        if (callback.call(elements[i], i, elements[i]) === false) return elements\n    } else {\n      for (key in elements)\n        if (callback.call(elements[key], key, elements[key]) === false) return elements\n    }\n\n    return elements\n  }\n\n  $.grep = function(elements, callback){\n    return filter.call(elements, callback)\n  }\n\n  if (window.JSON) $.parseJSON = JSON.parse\n\n  // Populate the class2type map\n  $.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function(i, name) {\n    class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase()\n  })\n\n  // Define methods that will be available on all\n  // Zepto collections\n  $.fn = {\n    constructor: zepto.Z,\n    length: 0,\n\n    // Because a collection acts like an array\n    // copy over these useful array functions.\n    forEach: emptyArray.forEach,\n    reduce: emptyArray.reduce,\n    push: emptyArray.push,\n    sort: emptyArray.sort,\n    splice: emptyArray.splice,\n    indexOf: emptyArray.indexOf,\n    concat: function(){\n      var i, value, args = []\n      for (i = 0; i < arguments.length; i++) {\n        value = arguments[i]\n        args[i] = zepto.isZ(value) ? value.toArray() : value\n      }\n      return concat.apply(zepto.isZ(this) ? this.toArray() : this, args)\n    },\n\n    // `map` and `slice` in the jQuery API work differently\n    // from their array counterparts\n    map: function(fn){\n      return $($.map(this, function(el, i){ return fn.call(el, i, el) }))\n    },\n    slice: function(){\n      return $(slice.apply(this, arguments))\n    },\n\n    ready: function(callback){\n      // need to check if document.body exists for IE as that browser reports\n      // document ready when it hasn't yet created the body element\n      if (readyRE.test(document.readyState) && document.body) callback($)\n      else document.addEventListener('DOMContentLoaded', function(){ callback($) }, false)\n      return this\n    },\n    get: function(idx){\n      return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]\n    },\n    toArray: function(){ return this.get() },\n    size: function(){\n      return this.length\n    },\n    remove: function(){\n      return this.each(function(){\n        if (this.parentNode != null)\n          this.parentNode.removeChild(this)\n      })\n    },\n    each: function(callback){\n      emptyArray.every.call(this, function(el, idx){\n        return callback.call(el, idx, el) !== false\n      })\n      return this\n    },\n    filter: function(selector){\n      if (isFunction(selector)) return this.not(this.not(selector))\n      return $(filter.call(this, function(element){\n        return zepto.matches(element, selector)\n      }))\n    },\n    add: function(selector,context){\n      return $(uniq(this.concat($(selector,context))))\n    },\n    is: function(selector){\n      return this.length > 0 && zepto.matches(this[0], selector)\n    },\n    not: function(selector){\n      var nodes=[]\n      if (isFunction(selector) && selector.call !== undefined)\n        this.each(function(idx){\n          if (!selector.call(this,idx)) nodes.push(this)\n        })\n      else {\n        var excludes = typeof selector == 'string' ? this.filter(selector) :\n          (likeArray(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)\n        this.forEach(function(el){\n          if (excludes.indexOf(el) < 0) nodes.push(el)\n        })\n      }\n      return $(nodes)\n    },\n    has: function(selector){\n      return this.filter(function(){\n        return isObject(selector) ?\n          $.contains(this, selector) :\n          $(this).find(selector).size()\n      })\n    },\n    eq: function(idx){\n      return idx === -1 ? this.slice(idx) : this.slice(idx, + idx + 1)\n    },\n    first: function(){\n      var el = this[0]\n      return el && !isObject(el) ? el : $(el)\n    },\n    last: function(){\n      var el = this[this.length - 1]\n      return el && !isObject(el) ? el : $(el)\n    },\n    find: function(selector){\n      var result, $this = this\n      if (!selector) result = $()\n      else if (typeof selector == 'object')\n        result = $(selector).filter(function(){\n          var node = this\n          return emptyArray.some.call($this, function(parent){\n            return $.contains(parent, node)\n          })\n        })\n      else if (this.length == 1) result = $(zepto.qsa(this[0], selector))\n      else result = this.map(function(){ return zepto.qsa(this, selector) })\n      return result\n    },\n    closest: function(selector, context){\n      var nodes = [], collection = typeof selector == 'object' && $(selector)\n      this.each(function(_, node){\n        while (node && !(collection ? collection.indexOf(node) >= 0 : zepto.matches(node, selector)))\n          node = node !== context && !isDocument(node) && node.parentNode\n        if (node && nodes.indexOf(node) < 0) nodes.push(node)\n      })\n      return $(nodes)\n    },\n    parents: function(selector){\n      var ancestors = [], nodes = this\n      while (nodes.length > 0)\n        nodes = $.map(nodes, function(node){\n          if ((node = node.parentNode) && !isDocument(node) && ancestors.indexOf(node) < 0) {\n            ancestors.push(node)\n            return node\n          }\n        })\n      return filtered(ancestors, selector)\n    },\n    parent: function(selector){\n      return filtered(uniq(this.pluck('parentNode')), selector)\n    },\n    children: function(selector){\n      return filtered(this.map(function(){ return children(this) }), selector)\n    },\n    contents: function() {\n      return this.map(function() { return this.contentDocument || slice.call(this.childNodes) })\n    },\n    siblings: function(selector){\n      return filtered(this.map(function(i, el){\n        return filter.call(children(el.parentNode), function(child){ return child!==el })\n      }), selector)\n    },\n    empty: function(){\n      return this.each(function(){ this.innerHTML = '' })\n    },\n    // `pluck` is borrowed from Prototype.js\n    pluck: function(property){\n      return $.map(this, function(el){ return el[property] })\n    },\n    show: function(){\n      return this.each(function(){\n        this.style.display == \"none\" && (this.style.display = '')\n        if (getComputedStyle(this, '').getPropertyValue(\"display\") == \"none\")\n          this.style.display = defaultDisplay(this.nodeName)\n      })\n    },\n    replaceWith: function(newContent){\n      return this.before(newContent).remove()\n    },\n    wrap: function(structure){\n      var func = isFunction(structure)\n      if (this[0] && !func)\n        var dom   = $(structure).get(0),\n            clone = dom.parentNode || this.length > 1\n\n      return this.each(function(index){\n        $(this).wrapAll(\n          func ? structure.call(this, index) :\n            clone ? dom.cloneNode(true) : dom\n        )\n      })\n    },\n    wrapAll: function(structure){\n      if (this[0]) {\n        $(this[0]).before(structure = $(structure))\n        var children\n        // drill down to the inmost element\n        while ((children = structure.children()).length) structure = children.first()\n        $(structure).append(this)\n      }\n      return this\n    },\n    wrapInner: function(structure){\n      var func = isFunction(structure)\n      return this.each(function(index){\n        var self = $(this), contents = self.contents(),\n            dom  = func ? structure.call(this, index) : structure\n        contents.length ? contents.wrapAll(dom) : self.append(dom)\n      })\n    },\n    unwrap: function(){\n      this.parent().each(function(){\n        $(this).replaceWith($(this).children())\n      })\n      return this\n    },\n    clone: function(){\n      return this.map(function(){ return this.cloneNode(true) })\n    },\n    hide: function(){\n      return this.css(\"display\", \"none\")\n    },\n    toggle: function(setting){\n      return this.each(function(){\n        var el = $(this)\n        ;(setting === undefined ? el.css(\"display\") == \"none\" : setting) ? el.show() : el.hide()\n      })\n    },\n    prev: function(selector){ return $(this.pluck('previousElementSibling')).filter(selector || '*') },\n    next: function(selector){ return $(this.pluck('nextElementSibling')).filter(selector || '*') },\n    html: function(html){\n      return 0 in arguments ?\n        this.each(function(idx){\n          var originHtml = this.innerHTML\n          $(this).empty().append( funcArg(this, html, idx, originHtml) )\n        }) :\n        (0 in this ? this[0].innerHTML : null)\n    },\n    text: function(text){\n      return 0 in arguments ?\n        this.each(function(idx){\n          var newText = funcArg(this, text, idx, this.textContent)\n          this.textContent = newText == null ? '' : ''+newText\n        }) :\n        (0 in this ? this.pluck('textContent').join(\"\") : null)\n    },\n    attr: function(name, value){\n      var result\n      return (typeof name == 'string' && !(1 in arguments)) ?\n        (0 in this && this[0].nodeType == 1 && (result = this[0].getAttribute(name)) != null ? result : undefined) :\n        this.each(function(idx){\n          if (this.nodeType !== 1) return\n          if (isObject(name)) for (key in name) setAttribute(this, key, name[key])\n          else setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name)))\n        })\n    },\n    removeAttr: function(name){\n      return this.each(function(){ this.nodeType === 1 && name.split(' ').forEach(function(attribute){\n        setAttribute(this, attribute)\n      }, this)})\n    },\n    prop: function(name, value){\n      name = propMap[name] || name\n      return (1 in arguments) ?\n        this.each(function(idx){\n          this[name] = funcArg(this, value, idx, this[name])\n        }) :\n        (this[0] && this[0][name])\n    },\n    removeProp: function(name){\n      name = propMap[name] || name\n      return this.each(function(){ delete this[name] })\n    },\n    data: function(name, value){\n      var attrName = 'data-' + name.replace(capitalRE, '-$1').toLowerCase()\n\n      var data = (1 in arguments) ?\n        this.attr(attrName, value) :\n        this.attr(attrName)\n\n      return data !== null ? deserializeValue(data) : undefined\n    },\n    val: function(value){\n      if (0 in arguments) {\n        if (value == null) value = \"\"\n        return this.each(function(idx){\n          this.value = funcArg(this, value, idx, this.value)\n        })\n      } else {\n        return this[0] && (this[0].multiple ?\n           $(this[0]).find('option').filter(function(){ return this.selected }).pluck('value') :\n           this[0].value)\n      }\n    },\n    offset: function(coordinates){\n      if (coordinates) return this.each(function(index){\n        var $this = $(this),\n            coords = funcArg(this, coordinates, index, $this.offset()),\n            parentOffset = $this.offsetParent().offset(),\n            props = {\n              top:  coords.top  - parentOffset.top,\n              left: coords.left - parentOffset.left\n            }\n\n        if ($this.css('position') == 'static') props['position'] = 'relative'\n        $this.css(props)\n      })\n      if (!this.length) return null\n      if (document.documentElement !== this[0] && !$.contains(document.documentElement, this[0]))\n        return {top: 0, left: 0}\n      var obj = this[0].getBoundingClientRect()\n      return {\n        left: obj.left + window.pageXOffset,\n        top: obj.top + window.pageYOffset,\n        width: Math.round(obj.width),\n        height: Math.round(obj.height)\n      }\n    },\n    css: function(property, value){\n      if (arguments.length < 2) {\n        var element = this[0]\n        if (typeof property == 'string') {\n          if (!element) return\n          return element.style[camelize(property)] || getComputedStyle(element, '').getPropertyValue(property)\n        } else if (isArray(property)) {\n          if (!element) return\n          var props = {}\n          var computedStyle = getComputedStyle(element, '')\n          $.each(property, function(_, prop){\n            props[prop] = (element.style[camelize(prop)] || computedStyle.getPropertyValue(prop))\n          })\n          return props\n        }\n      }\n\n      var css = ''\n      if (type(property) == 'string') {\n        if (!value && value !== 0)\n          this.each(function(){ this.style.removeProperty(dasherize(property)) })\n        else\n          css = dasherize(property) + \":\" + maybeAddPx(property, value)\n      } else {\n        for (key in property)\n          if (!property[key] && property[key] !== 0)\n            this.each(function(){ this.style.removeProperty(dasherize(key)) })\n          else\n            css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'\n      }\n\n      return this.each(function(){ this.style.cssText += ';' + css })\n    },\n    index: function(element){\n      return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0])\n    },\n    hasClass: function(name){\n      if (!name) return false\n      return emptyArray.some.call(this, function(el){\n        return this.test(className(el))\n      }, classRE(name))\n    },\n    addClass: function(name){\n      if (!name) return this\n      return this.each(function(idx){\n        if (!('className' in this)) return\n        classList = []\n        var cls = className(this), newName = funcArg(this, name, idx, cls)\n        newName.split(/\\s+/g).forEach(function(klass){\n          if (!$(this).hasClass(klass)) classList.push(klass)\n        }, this)\n        classList.length && className(this, cls + (cls ? \" \" : \"\") + classList.join(\" \"))\n      })\n    },\n    removeClass: function(name){\n      return this.each(function(idx){\n        if (!('className' in this)) return\n        if (name === undefined) return className(this, '')\n        classList = className(this)\n        funcArg(this, name, idx, classList).split(/\\s+/g).forEach(function(klass){\n          classList = classList.replace(classRE(klass), \" \")\n        })\n        className(this, classList.trim())\n      })\n    },\n    toggleClass: function(name, when){\n      if (!name) return this\n      return this.each(function(idx){\n        var $this = $(this), names = funcArg(this, name, idx, className(this))\n        names.split(/\\s+/g).forEach(function(klass){\n          (when === undefined ? !$this.hasClass(klass) : when) ?\n            $this.addClass(klass) : $this.removeClass(klass)\n        })\n      })\n    },\n    scrollTop: function(value){\n      if (!this.length) return\n      var hasScrollTop = 'scrollTop' in this[0]\n      if (value === undefined) return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset\n      return this.each(hasScrollTop ?\n        function(){ this.scrollTop = value } :\n        function(){ this.scrollTo(this.scrollX, value) })\n    },\n    scrollLeft: function(value){\n      if (!this.length) return\n      var hasScrollLeft = 'scrollLeft' in this[0]\n      if (value === undefined) return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset\n      return this.each(hasScrollLeft ?\n        function(){ this.scrollLeft = value } :\n        function(){ this.scrollTo(value, this.scrollY) })\n    },\n    position: function() {\n      if (!this.length) return\n\n      var elem = this[0],\n        // Get *real* offsetParent\n        offsetParent = this.offsetParent(),\n        // Get correct offsets\n        offset       = this.offset(),\n        parentOffset = rootNodeRE.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset()\n\n      // Subtract element margins\n      // note: when an element has margin: auto the offsetLeft and marginLeft\n      // are the same in Safari causing offset.left to incorrectly be 0\n      offset.top  -= parseFloat( $(elem).css('margin-top') ) || 0\n      offset.left -= parseFloat( $(elem).css('margin-left') ) || 0\n\n      // Add offsetParent borders\n      parentOffset.top  += parseFloat( $(offsetParent[0]).css('border-top-width') ) || 0\n      parentOffset.left += parseFloat( $(offsetParent[0]).css('border-left-width') ) || 0\n\n      // Subtract the two offsets\n      return {\n        top:  offset.top  - parentOffset.top,\n        left: offset.left - parentOffset.left\n      }\n    },\n    offsetParent: function() {\n      return this.map(function(){\n        var parent = this.offsetParent || document.body\n        while (parent && !rootNodeRE.test(parent.nodeName) && $(parent).css(\"position\") == \"static\")\n          parent = parent.offsetParent\n        return parent\n      })\n    }\n  }\n\n  // for now\n  $.fn.detach = $.fn.remove\n\n  // Generate the `width` and `height` functions\n  ;['width', 'height'].forEach(function(dimension){\n    var dimensionProperty =\n      dimension.replace(/./, function(m){ return m[0].toUpperCase() })\n\n    $.fn[dimension] = function(value){\n      var offset, el = this[0]\n      if (value === undefined) return isWindow(el) ? el['inner' + dimensionProperty] :\n        isDocument(el) ? el.documentElement['scroll' + dimensionProperty] :\n        (offset = this.offset()) && offset[dimension]\n      else return this.each(function(idx){\n        el = $(this)\n        el.css(dimension, funcArg(this, value, idx, el[dimension]()))\n      })\n    }\n  })\n\n  function traverseNode(node, fun) {\n    fun(node)\n    for (var i = 0, len = node.childNodes.length; i < len; i++)\n      traverseNode(node.childNodes[i], fun)\n  }\n\n  // Generate the `after`, `prepend`, `before`, `append`,\n  // `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.\n  adjacencyOperators.forEach(function(operator, operatorIndex) {\n    var inside = operatorIndex % 2 //=> prepend, append\n\n    $.fn[operator] = function(){\n      // arguments can be nodes, arrays of nodes, Zepto objects and HTML strings\n      var argType, nodes = $.map(arguments, function(arg) {\n            var arr = []\n            argType = type(arg)\n            if (argType == \"array\") {\n              arg.forEach(function(el) {\n                if (el.nodeType !== undefined) return arr.push(el)\n                else if ($.zepto.isZ(el)) return arr = arr.concat(el.get())\n                arr = arr.concat(zepto.fragment(el))\n              })\n              return arr\n            }\n            return argType == \"object\" || arg == null ?\n              arg : zepto.fragment(arg)\n          }),\n          parent, copyByClone = this.length > 1\n      if (nodes.length < 1) return this\n\n      return this.each(function(_, target){\n        parent = inside ? target : target.parentNode\n\n        // convert all methods to a \"before\" operation\n        target = operatorIndex == 0 ? target.nextSibling :\n                 operatorIndex == 1 ? target.firstChild :\n                 operatorIndex == 2 ? target :\n                 null\n\n        var parentInDocument = $.contains(document.documentElement, parent)\n\n        nodes.forEach(function(node){\n          if (copyByClone) node = node.cloneNode(true)\n          else if (!parent) return $(node).remove()\n\n          parent.insertBefore(node, target)\n          if (parentInDocument) traverseNode(node, function(el){\n            if (el.nodeName != null && el.nodeName.toUpperCase() === 'SCRIPT' &&\n               (!el.type || el.type === 'text/javascript') && !el.src){\n              var target = el.ownerDocument ? el.ownerDocument.defaultView : window\n              target['eval'].call(target, el.innerHTML)\n            }\n          })\n        })\n      })\n    }\n\n    // after    => insertAfter\n    // prepend  => prependTo\n    // before   => insertBefore\n    // append   => appendTo\n    $.fn[inside ? operator+'To' : 'insert'+(operatorIndex ? 'Before' : 'After')] = function(html){\n      $(html)[operator](this)\n      return this\n    }\n  })\n\n  zepto.Z.prototype = Z.prototype = $.fn\n\n  // Export internal API functions in the `$.zepto` namespace\n  zepto.uniq = uniq\n  zepto.deserializeValue = deserializeValue\n  $.zepto = zepto\n\n  return $\n})()\n\nwindow.Zepto = Zepto\nwindow.$ === undefined && (window.$ = Zepto)\n\n;(function($){\n  var _zid = 1, undefined,\n      slice = Array.prototype.slice,\n      isFunction = $.isFunction,\n      isString = function(obj){ return typeof obj == 'string' },\n      handlers = {},\n      specialEvents={},\n      focusinSupported = 'onfocusin' in window,\n      focus = { focus: 'focusin', blur: 'focusout' },\n      hover = { mouseenter: 'mouseover', mouseleave: 'mouseout' }\n\n  specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = 'MouseEvents'\n\n  function zid(element) {\n    return element._zid || (element._zid = _zid++)\n  }\n  function findHandlers(element, event, fn, selector) {\n    event = parse(event)\n    if (event.ns) var matcher = matcherFor(event.ns)\n    return (handlers[zid(element)] || []).filter(function(handler) {\n      return handler\n        && (!event.e  || handler.e == event.e)\n        && (!event.ns || matcher.test(handler.ns))\n        && (!fn       || zid(handler.fn) === zid(fn))\n        && (!selector || handler.sel == selector)\n    })\n  }\n  function parse(event) {\n    var parts = ('' + event).split('.')\n    return {e: parts[0], ns: parts.slice(1).sort().join(' ')}\n  }\n  function matcherFor(ns) {\n    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)')\n  }\n\n  function eventCapture(handler, captureSetting) {\n    return handler.del &&\n      (!focusinSupported && (handler.e in focus)) ||\n      !!captureSetting\n  }\n\n  function realEvent(type) {\n    return hover[type] || (focusinSupported && focus[type]) || type\n  }\n\n  function add(element, events, fn, data, selector, delegator, capture){\n    var id = zid(element), set = (handlers[id] || (handlers[id] = []))\n    events.split(/\\s/).forEach(function(event){\n      if (event == 'ready') return $(document).ready(fn)\n      var handler   = parse(event)\n      handler.fn    = fn\n      handler.sel   = selector\n      // emulate mouseenter, mouseleave\n      if (handler.e in hover) fn = function(e){\n        var related = e.relatedTarget\n        if (!related || (related !== this && !$.contains(this, related)))\n          return handler.fn.apply(this, arguments)\n      }\n      handler.del   = delegator\n      var callback  = delegator || fn\n      handler.proxy = function(e){\n        e = compatible(e)\n        if (e.isImmediatePropagationStopped()) return\n        e.data = data\n        var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args))\n        if (result === false) e.preventDefault(), e.stopPropagation()\n        return result\n      }\n      handler.i = set.length\n      set.push(handler)\n      if ('addEventListener' in element)\n        element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))\n    })\n  }\n  function remove(element, events, fn, selector, capture){\n    var id = zid(element)\n    ;(events || '').split(/\\s/).forEach(function(event){\n      findHandlers(element, event, fn, selector).forEach(function(handler){\n        delete handlers[id][handler.i]\n      if ('removeEventListener' in element)\n        element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))\n      })\n    })\n  }\n\n  $.event = { add: add, remove: remove }\n\n  $.proxy = function(fn, context) {\n    var args = (2 in arguments) && slice.call(arguments, 2)\n    if (isFunction(fn)) {\n      var proxyFn = function(){ return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments) }\n      proxyFn._zid = zid(fn)\n      return proxyFn\n    } else if (isString(context)) {\n      if (args) {\n        args.unshift(fn[context], fn)\n        return $.proxy.apply(null, args)\n      } else {\n        return $.proxy(fn[context], fn)\n      }\n    } else {\n      throw new TypeError(\"expected function\")\n    }\n  }\n\n  $.fn.bind = function(event, data, callback){\n    return this.on(event, data, callback)\n  }\n  $.fn.unbind = function(event, callback){\n    return this.off(event, callback)\n  }\n  $.fn.one = function(event, selector, data, callback){\n    return this.on(event, selector, data, callback, 1)\n  }\n\n  var returnTrue = function(){return true},\n      returnFalse = function(){return false},\n      ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$|webkitMovement[XY]$)/,\n      eventMethods = {\n        preventDefault: 'isDefaultPrevented',\n        stopImmediatePropagation: 'isImmediatePropagationStopped',\n        stopPropagation: 'isPropagationStopped'\n      }\n\n  function compatible(event, source) {\n    if (source || !event.isDefaultPrevented) {\n      source || (source = event)\n\n      $.each(eventMethods, function(name, predicate) {\n        var sourceMethod = source[name]\n        event[name] = function(){\n          this[predicate] = returnTrue\n          return sourceMethod && sourceMethod.apply(source, arguments)\n        }\n        event[predicate] = returnFalse\n      })\n\n      event.timeStamp || (event.timeStamp = Date.now())\n\n      if (source.defaultPrevented !== undefined ? source.defaultPrevented :\n          'returnValue' in source ? source.returnValue === false :\n          source.getPreventDefault && source.getPreventDefault())\n        event.isDefaultPrevented = returnTrue\n    }\n    return event\n  }\n\n  function createProxy(event) {\n    var key, proxy = { originalEvent: event }\n    for (key in event)\n      if (!ignoreProperties.test(key) && event[key] !== undefined) proxy[key] = event[key]\n\n    return compatible(proxy, event)\n  }\n\n  $.fn.delegate = function(selector, event, callback){\n    return this.on(event, selector, callback)\n  }\n  $.fn.undelegate = function(selector, event, callback){\n    return this.off(event, selector, callback)\n  }\n\n  $.fn.live = function(event, callback){\n    $(document.body).delegate(this.selector, event, callback)\n    return this\n  }\n  $.fn.die = function(event, callback){\n    $(document.body).undelegate(this.selector, event, callback)\n    return this\n  }\n\n  $.fn.on = function(event, selector, data, callback, one){\n    var autoRemove, delegator, $this = this\n    if (event && !isString(event)) {\n      $.each(event, function(type, fn){\n        $this.on(type, selector, data, fn, one)\n      })\n      return $this\n    }\n\n    if (!isString(selector) && !isFunction(callback) && callback !== false)\n      callback = data, data = selector, selector = undefined\n    if (callback === undefined || data === false)\n      callback = data, data = undefined\n\n    if (callback === false) callback = returnFalse\n\n    return $this.each(function(_, element){\n      if (one) autoRemove = function(e){\n        remove(element, e.type, callback)\n        return callback.apply(this, arguments)\n      }\n\n      if (selector) delegator = function(e){\n        var evt, match = $(e.target).closest(selector, element).get(0)\n        if (match && match !== element) {\n          evt = $.extend(createProxy(e), {currentTarget: match, liveFired: element})\n          return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1)))\n        }\n      }\n\n      add(element, event, callback, data, selector, delegator || autoRemove)\n    })\n  }\n  $.fn.off = function(event, selector, callback){\n    var $this = this\n    if (event && !isString(event)) {\n      $.each(event, function(type, fn){\n        $this.off(type, selector, fn)\n      })\n      return $this\n    }\n\n    if (!isString(selector) && !isFunction(callback) && callback !== false)\n      callback = selector, selector = undefined\n\n    if (callback === false) callback = returnFalse\n\n    return $this.each(function(){\n      remove(this, event, callback, selector)\n    })\n  }\n\n  $.fn.trigger = function(event, args){\n    event = (isString(event) || $.isPlainObject(event)) ? $.Event(event) : compatible(event)\n    event._args = args\n    return this.each(function(){\n      // handle focus(), blur() by calling them directly\n      if (event.type in focus && typeof this[event.type] == \"function\") this[event.type]()\n      // items in the collection might not be DOM elements\n      else if ('dispatchEvent' in this) this.dispatchEvent(event)\n      else $(this).triggerHandler(event, args)\n    })\n  }\n\n  // triggers event handlers on current element just as if an event occurred,\n  // doesn't trigger an actual event, doesn't bubble\n  $.fn.triggerHandler = function(event, args){\n    var e, result\n    this.each(function(i, element){\n      e = createProxy(isString(event) ? $.Event(event) : event)\n      e._args = args\n      e.target = element\n      $.each(findHandlers(element, event.type || event), function(i, handler){\n        result = handler.proxy(e)\n        if (e.isImmediatePropagationStopped()) return false\n      })\n    })\n    return result\n  }\n\n  // shortcut methods for `.bind(event, fn)` for each event type\n  ;('focusin focusout focus blur load resize scroll unload click dblclick '+\n  'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave '+\n  'change select keydown keypress keyup error').split(' ').forEach(function(event) {\n    $.fn[event] = function(callback) {\n      return (0 in arguments) ?\n        this.bind(event, callback) :\n        this.trigger(event)\n    }\n  })\n\n  $.Event = function(type, props) {\n    if (!isString(type)) props = type, type = props.type\n    var event = document.createEvent(specialEvents[type] || 'Events'), bubbles = true\n    if (props) for (var name in props) (name == 'bubbles') ? (bubbles = !!props[name]) : (event[name] = props[name])\n    event.initEvent(type, bubbles, true)\n    return compatible(event)\n  }\n\n})(Zepto)\n\n;(function($){\n  var jsonpID = +new Date(),\n      document = window.document,\n      key,\n      name,\n      rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\n      scriptTypeRE = /^(?:text|application)\\/javascript/i,\n      xmlTypeRE = /^(?:text|application)\\/xml/i,\n      jsonType = 'application/json',\n      htmlType = 'text/html',\n      blankRE = /^\\s*$/,\n      originAnchor = document.createElement('a')\n\n  originAnchor.href = window.location.href\n\n  // trigger a custom event and return false if it was cancelled\n  function triggerAndReturn(context, eventName, data) {\n    var event = $.Event(eventName)\n    $(context).trigger(event, data)\n    return !event.isDefaultPrevented()\n  }\n\n  // trigger an Ajax \"global\" event\n  function triggerGlobal(settings, context, eventName, data) {\n    if (settings.global) return triggerAndReturn(context || document, eventName, data)\n  }\n\n  // Number of active Ajax requests\n  $.active = 0\n\n  function ajaxStart(settings) {\n    if (settings.global && $.active++ === 0) triggerGlobal(settings, null, 'ajaxStart')\n  }\n  function ajaxStop(settings) {\n    if (settings.global && !(--$.active)) triggerGlobal(settings, null, 'ajaxStop')\n  }\n\n  // triggers an extra global event \"ajaxBeforeSend\" that's like \"ajaxSend\" but cancelable\n  function ajaxBeforeSend(xhr, settings) {\n    var context = settings.context\n    if (settings.beforeSend.call(context, xhr, settings) === false ||\n        triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false)\n      return false\n\n    triggerGlobal(settings, context, 'ajaxSend', [xhr, settings])\n  }\n  function ajaxSuccess(data, xhr, settings, deferred) {\n    var context = settings.context, status = 'success'\n    settings.success.call(context, data, status, xhr)\n    if (deferred) deferred.resolveWith(context, [data, status, xhr])\n    triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])\n    ajaxComplete(status, xhr, settings)\n  }\n  // type: \"timeout\", \"error\", \"abort\", \"parsererror\"\n  function ajaxError(error, type, xhr, settings, deferred) {\n    var context = settings.context\n    settings.error.call(context, xhr, type, error)\n    if (deferred) deferred.rejectWith(context, [xhr, type, error])\n    triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error || type])\n    ajaxComplete(type, xhr, settings)\n  }\n  // status: \"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", \"parsererror\"\n  function ajaxComplete(status, xhr, settings) {\n    var context = settings.context\n    settings.complete.call(context, xhr, status)\n    triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])\n    ajaxStop(settings)\n  }\n\n  function ajaxDataFilter(data, type, settings) {\n    if (settings.dataFilter == empty) return data\n    var context = settings.context\n    return settings.dataFilter.call(context, data, type)\n  }\n\n  // Empty function, used as default callback\n  function empty() {}\n\n  $.ajaxJSONP = function(options, deferred){\n    if (!('type' in options)) return $.ajax(options)\n\n    var _callbackName = options.jsonpCallback,\n      callbackName = ($.isFunction(_callbackName) ?\n        _callbackName() : _callbackName) || ('Zepto' + (jsonpID++)),\n      script = document.createElement('script'),\n      originalCallback = window[callbackName],\n      responseData,\n      abort = function(errorType) {\n        $(script).triggerHandler('error', errorType || 'abort')\n      },\n      xhr = { abort: abort }, abortTimeout\n\n    if (deferred) deferred.promise(xhr)\n\n    $(script).on('load error', function(e, errorType){\n      clearTimeout(abortTimeout)\n      $(script).off().remove()\n\n      if (e.type == 'error' || !responseData) {\n        ajaxError(null, errorType || 'error', xhr, options, deferred)\n      } else {\n        ajaxSuccess(responseData[0], xhr, options, deferred)\n      }\n\n      window[callbackName] = originalCallback\n      if (responseData && $.isFunction(originalCallback))\n        originalCallback(responseData[0])\n\n      originalCallback = responseData = undefined\n    })\n\n    if (ajaxBeforeSend(xhr, options) === false) {\n      abort('abort')\n      return xhr\n    }\n\n    window[callbackName] = function(){\n      responseData = arguments\n    }\n\n    script.src = options.url.replace(/\\?(.+)=\\?/, '?$1=' + callbackName)\n    document.head.appendChild(script)\n\n    if (options.timeout > 0) abortTimeout = setTimeout(function(){\n      abort('timeout')\n    }, options.timeout)\n\n    return xhr\n  }\n\n  $.ajaxSettings = {\n    // Default type of request\n    type: 'GET',\n    // Callback that is executed before request\n    beforeSend: empty,\n    // Callback that is executed if the request succeeds\n    success: empty,\n    // Callback that is executed the the server drops error\n    error: empty,\n    // Callback that is executed on request complete (both: error and success)\n    complete: empty,\n    // The context for the callbacks\n    context: null,\n    // Whether to trigger \"global\" Ajax events\n    global: true,\n    // Transport\n    xhr: function () {\n      return new window.XMLHttpRequest()\n    },\n    // MIME types mapping\n    // IIS returns Javascript as \"application/x-javascript\"\n    accepts: {\n      script: 'text/javascript, application/javascript, application/x-javascript',\n      json:   jsonType,\n      xml:    'application/xml, text/xml',\n      html:   htmlType,\n      text:   'text/plain'\n    },\n    // Whether the request is to another domain\n    crossDomain: false,\n    // Default timeout\n    timeout: 0,\n    // Whether data should be serialized to string\n    processData: true,\n    // Whether the browser should be allowed to cache GET responses\n    cache: true,\n    //Used to handle the raw response data of XMLHttpRequest.\n    //This is a pre-filtering function to sanitize the response.\n    //The sanitized response should be returned\n    dataFilter: empty\n  }\n\n  function mimeToDataType(mime) {\n    if (mime) mime = mime.split(';', 2)[0]\n    return mime && ( mime == htmlType ? 'html' :\n      mime == jsonType ? 'json' :\n      scriptTypeRE.test(mime) ? 'script' :\n      xmlTypeRE.test(mime) && 'xml' ) || 'text'\n  }\n\n  function appendQuery(url, query) {\n    if (query == '') return url\n    return (url + '&' + query).replace(/[&?]{1,2}/, '?')\n  }\n\n  // serialize payload and append it to the URL for GET requests\n  function serializeData(options) {\n    if (options.processData && options.data && $.type(options.data) != \"string\")\n      options.data = $.param(options.data, options.traditional)\n    if (options.data && (!options.type || options.type.toUpperCase() == 'GET' || 'jsonp' == options.dataType))\n      options.url = appendQuery(options.url, options.data), options.data = undefined\n  }\n\n  $.ajax = function(options){\n    var settings = $.extend({}, options || {}),\n        deferred = $.Deferred && $.Deferred(),\n        urlAnchor, hashIndex\n    for (key in $.ajaxSettings) if (settings[key] === undefined) settings[key] = $.ajaxSettings[key]\n\n    ajaxStart(settings)\n\n    if (!settings.crossDomain) {\n      urlAnchor = document.createElement('a')\n      urlAnchor.href = settings.url\n      // cleans up URL for .href (IE only), see https://github.com/madrobby/zepto/pull/1049\n      urlAnchor.href = urlAnchor.href\n      settings.crossDomain = (originAnchor.protocol + '//' + originAnchor.host) !== (urlAnchor.protocol + '//' + urlAnchor.host)\n    }\n\n    if (!settings.url) settings.url = window.location.toString()\n    if ((hashIndex = settings.url.indexOf('#')) > -1) settings.url = settings.url.slice(0, hashIndex)\n    serializeData(settings)\n\n    var dataType = settings.dataType, hasPlaceholder = /\\?.+=\\?/.test(settings.url)\n    if (hasPlaceholder) dataType = 'jsonp'\n\n    if (settings.cache === false || (\n         (!options || options.cache !== true) &&\n         ('script' == dataType || 'jsonp' == dataType)\n        ))\n      settings.url = appendQuery(settings.url, '_=' + Date.now())\n\n    if ('jsonp' == dataType) {\n      if (!hasPlaceholder)\n        settings.url = appendQuery(settings.url,\n          settings.jsonp ? (settings.jsonp + '=?') : settings.jsonp === false ? '' : 'callback=?')\n      return $.ajaxJSONP(settings, deferred)\n    }\n\n    var mime = settings.accepts[dataType],\n        headers = { },\n        setHeader = function(name, value) { headers[name.toLowerCase()] = [name, value] },\n        protocol = /^([\\w-]+:)\\/\\//.test(settings.url) ? RegExp.$1 : window.location.protocol,\n        xhr = settings.xhr(),\n        nativeSetHeader = xhr.setRequestHeader,\n        abortTimeout\n\n    if (deferred) deferred.promise(xhr)\n\n    if (!settings.crossDomain) setHeader('X-Requested-With', 'XMLHttpRequest')\n    setHeader('Accept', mime || '*/*')\n    if (mime = settings.mimeType || mime) {\n      if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0]\n      xhr.overrideMimeType && xhr.overrideMimeType(mime)\n    }\n    if (settings.contentType || (settings.contentType !== false && settings.data && settings.type.toUpperCase() != 'GET'))\n      setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded')\n\n    if (settings.headers) for (name in settings.headers) setHeader(name, settings.headers[name])\n    xhr.setRequestHeader = setHeader\n\n    xhr.onreadystatechange = function(){\n      if (xhr.readyState == 4) {\n        xhr.onreadystatechange = empty\n        clearTimeout(abortTimeout)\n        var result, error = false\n        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol == 'file:')) {\n          dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type'))\n\n          if (xhr.responseType == 'arraybuffer' || xhr.responseType == 'blob')\n            result = xhr.response\n          else {\n            result = xhr.responseText\n\n            try {\n              // http://perfectionkills.com/global-eval-what-are-the-options/\n              // sanitize response accordingly if data filter callback provided\n              result = ajaxDataFilter(result, dataType, settings)\n              if (dataType == 'script')    (1,eval)(result)\n              else if (dataType == 'xml')  result = xhr.responseXML\n              else if (dataType == 'json') result = blankRE.test(result) ? null : $.parseJSON(result)\n            } catch (e) { error = e }\n\n            if (error) return ajaxError(error, 'parsererror', xhr, settings, deferred)\n          }\n\n          ajaxSuccess(result, xhr, settings, deferred)\n        } else {\n          ajaxError(xhr.statusText || null, xhr.status ? 'error' : 'abort', xhr, settings, deferred)\n        }\n      }\n    }\n\n    if (ajaxBeforeSend(xhr, settings) === false) {\n      xhr.abort()\n      ajaxError(null, 'abort', xhr, settings, deferred)\n      return xhr\n    }\n\n    var async = 'async' in settings ? settings.async : true\n    xhr.open(settings.type, settings.url, async, settings.username, settings.password)\n\n    if (settings.xhrFields) for (name in settings.xhrFields) xhr[name] = settings.xhrFields[name]\n\n    for (name in headers) nativeSetHeader.apply(xhr, headers[name])\n\n    if (settings.timeout > 0) abortTimeout = setTimeout(function(){\n        xhr.onreadystatechange = empty\n        xhr.abort()\n        ajaxError(null, 'timeout', xhr, settings, deferred)\n      }, settings.timeout)\n\n    // avoid sending empty string (#319)\n    xhr.send(settings.data ? settings.data : null)\n    return xhr\n  }\n\n  // handle optional data/success arguments\n  function parseArguments(url, data, success, dataType) {\n    if ($.isFunction(data)) dataType = success, success = data, data = undefined\n    if (!$.isFunction(success)) dataType = success, success = undefined\n    return {\n      url: url\n    , data: data\n    , success: success\n    , dataType: dataType\n    }\n  }\n\n  $.get = function(/* url, data, success, dataType */){\n    return $.ajax(parseArguments.apply(null, arguments))\n  }\n\n  $.post = function(/* url, data, success, dataType */){\n    var options = parseArguments.apply(null, arguments)\n    options.type = 'POST'\n    return $.ajax(options)\n  }\n\n  $.getJSON = function(/* url, data, success */){\n    var options = parseArguments.apply(null, arguments)\n    options.dataType = 'json'\n    return $.ajax(options)\n  }\n\n  $.fn.load = function(url, data, success){\n    if (!this.length) return this\n    var self = this, parts = url.split(/\\s/), selector,\n        options = parseArguments(url, data, success),\n        callback = options.success\n    if (parts.length > 1) options.url = parts[0], selector = parts[1]\n    options.success = function(response){\n      self.html(selector ?\n        $('<div>').html(response.replace(rscript, \"\")).find(selector)\n        : response)\n      callback && callback.apply(self, arguments)\n    }\n    $.ajax(options)\n    return this\n  }\n\n  var escape = encodeURIComponent\n\n  function serialize(params, obj, traditional, scope){\n    var type, array = $.isArray(obj), hash = $.isPlainObject(obj)\n    $.each(obj, function(key, value) {\n      type = $.type(value)\n      if (scope) key = traditional ? scope :\n        scope + '[' + (hash || type == 'object' || type == 'array' ? key : '') + ']'\n      // handle data in serializeArray() format\n      if (!scope && array) params.add(value.name, value.value)\n      // recurse into nested objects\n      else if (type == \"array\" || (!traditional && type == \"object\"))\n        serialize(params, value, traditional, key)\n      else params.add(key, value)\n    })\n  }\n\n  $.param = function(obj, traditional){\n    var params = []\n    params.add = function(key, value) {\n      if ($.isFunction(value)) value = value()\n      if (value == null) value = \"\"\n      this.push(escape(key) + '=' + escape(value))\n    }\n    serialize(params, obj, traditional)\n    return params.join('&').replace(/%20/g, '+')\n  }\n})(Zepto)\n\n;(function($){\n  $.fn.serializeArray = function() {\n    var name, type, result = [],\n      add = function(value) {\n        if (value.forEach) return value.forEach(add)\n        result.push({ name: name, value: value })\n      }\n    if (this[0]) $.each(this[0].elements, function(_, field){\n      type = field.type, name = field.name\n      if (name && field.nodeName.toLowerCase() != 'fieldset' &&\n        !field.disabled && type != 'submit' && type != 'reset' && type != 'button' && type != 'file' &&\n        ((type != 'radio' && type != 'checkbox') || field.checked))\n          add($(field).val())\n    })\n    return result\n  }\n\n  $.fn.serialize = function(){\n    var result = []\n    this.serializeArray().forEach(function(elm){\n      result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value))\n    })\n    return result.join('&')\n  }\n\n  $.fn.submit = function(callback) {\n    if (0 in arguments) this.bind('submit', callback)\n    else if (this.length) {\n      var event = $.Event('submit')\n      this.eq(0).trigger(event)\n      if (!event.isDefaultPrevented()) this.get(0).submit()\n    }\n    return this\n  }\n\n})(Zepto)\n\n;(function(){\n  // getComputedStyle shouldn't freak out when called\n  // without a valid element as argument\n  try {\n    getComputedStyle(undefined)\n  } catch(e) {\n    var nativeGetComputedStyle = getComputedStyle\n    window.getComputedStyle = function(element, pseudoElement){\n      try {\n        return nativeGetComputedStyle(element, pseudoElement)\n      } catch(e) {\n        return null\n      }\n    }\n  }\n})()\n  return Zepto\n}))\n"},function(e,t,n){(function(e){!function(c){var u,t=1,d=Array.prototype.slice,p=c.isFunction,h=function(e){return"string"==typeof e},f={},r={},n="onfocusin"in window,i={focus:"focusin",blur:"focusout"},m={mouseenter:"mouseover",mouseleave:"mouseout"};function v(e){return e._zid||(e._zid=t++)}function s(e,t,n,i){if((t=g(t)).ns)var a=(r=t.ns,new RegExp("(?:^| )"+r.replace(" "," .* ?")+"(?: |$)"));var r;return(f[v(e)]||[]).filter(function(e){return e&&(!t.e||e.e==t.e)&&(!t.ns||a.test(e.ns))&&(!n||v(e.fn)===v(n))&&(!i||e.sel==i)})}function g(e){var t=(""+e).split(".");return{e:t[0],ns:t.slice(1).sort().join(" ")}}function y(e,t){return e.del&&!n&&e.e in i||!!t}function b(e){return m[e]||n&&i[e]||e}function w(a,e,t,r,s,o,l){var n=v(a),d=f[n]||(f[n]=[]);e.split(/\s/).forEach(function(e){if("ready"==e)return c(document).ready(t);var n=g(e);n.fn=t,n.sel=s,n.e in m&&(t=function(e){var t=e.relatedTarget;if(!t||t!==this&&!c.contains(this,t))return n.fn.apply(this,arguments)});var i=(n.del=o)||t;n.proxy=function(e){if(!(e=E(e)).isImmediatePropagationStopped()){e.data=r;var t=i.apply(a,e._args==u?[e]:[e].concat(e._args));return!1===t&&(e.preventDefault(),e.stopPropagation()),t}},n.i=d.length,d.push(n),"addEventListener"in a&&a.addEventListener(b(n.e),n.proxy,y(n,l))})}function x(t,e,n,i,a){var r=v(t);(e||"").split(/\s/).forEach(function(e){s(t,e,n,i).forEach(function(e){delete f[r][e.i],"removeEventListener"in t&&t.removeEventListener(b(e.e),e.proxy,y(e,a))})})}r.click=r.mousedown=r.mouseup=r.mousemove="MouseEvents",c.event={add:w,remove:x},c.proxy=function(e,t){var n=2 in arguments&&d.call(arguments,2);if(p(e)){var i=function(){return e.apply(t,n?n.concat(d.call(arguments)):arguments)};return i._zid=v(e),i}if(h(t))return n?(n.unshift(e[t],e),c.proxy.apply(null,n)):c.proxy(e[t],e);throw new TypeError("expected function")},c.fn.bind=function(e,t,n){return this.on(e,t,n)},c.fn.unbind=function(e,t){return this.off(e,t)},c.fn.one=function(e,t,n,i){return this.on(e,t,n,i,1)};var o=function(){return!0},T=function(){return!1},a=/^([A-Z]|returnValue$|layer[XY]$|webkitMovement[XY]$)/,e={preventDefault:"isDefaultPrevented",stopImmediatePropagation:"isImmediatePropagationStopped",stopPropagation:"isPropagationStopped"};function E(i,a){return!a&&i.isDefaultPrevented||(a||(a=i),c.each(e,function(e,t){var n=a[e];i[e]=function(){return this[t]=o,n&&n.apply(a,arguments)},i[t]=T}),i.timeStamp||(i.timeStamp=Date.now()),(a.defaultPrevented!==u?a.defaultPrevented:"returnValue"in a?!1===a.returnValue:a.getPreventDefault&&a.getPreventDefault())&&(i.isDefaultPrevented=o)),i}function S(e){var t,n={originalEvent:e};for(t in e)a.test(t)||e[t]===u||(n[t]=e[t]);return E(n,e)}c.fn.delegate=function(e,t,n){return this.on(t,e,n)},c.fn.undelegate=function(e,t,n){return this.off(t,e,n)},c.fn.live=function(e,t){return c(document.body).delegate(this.selector,e,t),this},c.fn.die=function(e,t){return c(document.body).undelegate(this.selector,e,t),this},c.fn.on=function(t,a,n,r,s){var o,l,i=this;return t&&!h(t)?(c.each(t,function(e,t){i.on(e,a,n,t,s)}),i):(h(a)||p(r)||!1===r||(r=n,n=a,a=u),r!==u&&!1!==n||(r=n,n=u),!1===r&&(r=T),i.each(function(e,i){s&&(o=function(e){return x(i,e.type,r),r.apply(this,arguments)}),a&&(l=function(e){var t,n=c(e.target).closest(a,i).get(0);if(n&&n!==i)return t=c.extend(S(e),{currentTarget:n,liveFired:i}),(o||r).apply(n,[t].concat(d.call(arguments,1)))}),w(i,t,r,n,a,l||o)}))},c.fn.off=function(e,n,t){var i=this;return e&&!h(e)?(c.each(e,function(e,t){i.off(e,n,t)}),i):(h(n)||p(t)||!1===t||(t=n,n=u),!1===t&&(t=T),i.each(function(){x(this,e,t,n)}))},c.fn.trigger=function(e,t){return(e=h(e)||c.isPlainObject(e)?c.Event(e):E(e))._args=t,this.each(function(){e.type in i&&"function"==typeof this[e.type]?this[e.type]():"dispatchEvent"in this?this.dispatchEvent(e):c(this).triggerHandler(e,t)})},c.fn.triggerHandler=function(n,i){var a,r;return this.each(function(e,t){(a=S(h(n)?c.Event(n):n))._args=i,a.target=t,c.each(s(t,n.type||n),function(e,t){if(r=t.proxy(a),a.isImmediatePropagationStopped())return!1})}),r},"focusin focusout focus blur load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select keydown keypress keyup error".split(" ").forEach(function(t){c.fn[t]=function(e){return 0 in arguments?this.bind(t,e):this.trigger(t)}}),c.Event=function(e,t){h(e)||(e=(t=e).type);var n=document.createEvent(r[e]||"Events"),i=!0;if(t)for(var a in t)"bubbles"==a?i=!!t[a]:n[a]=t[a];return n.initEvent(e,i,!0),E(n)}}(e)}).call(this,n(0))},function(e,t,n){(function(e){!function(h,f){var n,m,v,g,y,b,w,x,T,E,i="",a=document.createElement("div"),S=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i,C={};function e(e){return n?n+e:e.toLowerCase()}a.style.transform===f&&h.each({Webkit:"webkit",Moz:"",O:"o"},function(e,t){if(a.style[e+"TransitionProperty"]!==f)return i="-"+e.toLowerCase()+"-",n=t,!1}),m=i+"transform",C[v=i+"transition-property"]=C[g=i+"transition-duration"]=C[b=i+"transition-delay"]=C[y=i+"transition-timing-function"]=C[w=i+"animation-name"]=C[x=i+"animation-duration"]=C[E=i+"animation-delay"]=C[T=i+"animation-timing-function"]="",h.fx={off:n===f&&a.style.transitionProperty===f,speeds:{_default:400,fast:200,slow:600},cssPrefix:i,transitionEnd:e("TransitionEnd"),animationEnd:e("AnimationEnd")},h.fn.animate=function(e,t,n,i,a){return h.isFunction(t)&&(i=t,t=n=f),h.isFunction(n)&&(i=n,n=f),h.isPlainObject(t)&&(n=t.easing,i=t.complete,a=t.delay,t=t.duration),t&&(t=("number"==typeof t?t:h.fx.speeds[t]||h.fx.speeds._default)/1e3),a&&(a=parseFloat(a)/1e3),this.anim(e,t,n,i,a)},h.fn.anim=function(e,t,n,i,a){var r,s,o,l={},d="",c=this,u=h.fx.transitionEnd,p=!1;if(t===f&&(t=h.fx.speeds._default/1e3),a===f&&(a=0),h.fx.off&&(t=0),"string"==typeof e)l[w]=e,l[x]=t+"s",l[E]=a+"s",l[T]=n||"linear",u=h.fx.animationEnd;else{for(r in s=[],e)S.test(r)?d+=r+"("+e[r]+") ":(l[r]=e[r],s.push(r.replace(/([A-Z])/g,"-$1").toLowerCase()));d&&(l[m]=d,s.push(m)),0<t&&"object"==typeof e&&(l[v]=s.join(", "),l[g]=t+"s",l[b]=a+"s",l[y]=n||"linear")}return o=function(e){if(void 0!==e){if(e.target!==e.currentTarget)return;h(e.target).unbind(u,o)}else h(this).unbind(u,o);p=!0,h(this).css(C),i&&i.call(this)},0<t&&(this.bind(u,o),setTimeout(function(){p||o.call(c)},1e3*(t+a)+25)),this.size()&&this.get(0).clientLeft,this.css(l),t<=0&&setTimeout(function(){c.each(function(){o.call(this)})},0),this},a=null}(e)}).call(this,n(0))},function(e,t,n){(function(e){!function(s,o){window.document.documentElement;var i=s.fn.show,a=s.fn.hide,e=s.fn.toggle;function r(e,t,n,i,a){"function"!=typeof t||a||(a=t,t=o);var r={opacity:n};return i&&(r.scale=i,e.css(s.fx.cssPrefix+"transform-origin","0 0")),e.animate(r,t,null,a)}function n(e,t,n,i){return r(e,t,0,n,function(){a.call(s(this)),i&&i.call(this)})}s.fn.show=function(e,t){return i.call(this),e===o?e=0:this.css("opacity",0),r(this,e,1,"1,1",t)},s.fn.hide=function(e,t){return e===o?a.call(this):n(this,e,"0,0",t)},s.fn.toggle=function(t,n){return t===o||"boolean"==typeof t?e.call(this,t):this.each(function(){var e=s(this);e["none"==e.css("display")?"show":"hide"](t,n)})},s.fn.fadeTo=function(e,t,n){return r(this,e,t,null,n)},s.fn.fadeIn=function(e,t){var n=this.css("opacity");return 0<n?this.css("opacity",0):n=1,i.call(this).fadeTo(e,n,t)},s.fn.fadeOut=function(e,t){return n(this,e,null,t)},s.fn.fadeToggle=function(t,n){return this.each(function(){var e=s(this);e[0==e.css("opacity")||"none"==e.css("display")?"fadeIn":"fadeOut"](t,n)})}}(e)}).call(this,n(0))},function(e,t,n){(function(e){!function(o){var l,d,c,u,p,h={};function f(){u=null,h.last&&(h.el.trigger("longTap"),h={})}function m(){u&&clearTimeout(u),u=null}function v(){l&&clearTimeout(l),d&&clearTimeout(d),c&&clearTimeout(c),u&&clearTimeout(u),l=d=c=u=null,h={}}function g(e){return("touch"==e.pointerType||e.pointerType==e.MSPOINTER_TYPE_TOUCH)&&e.isPrimary}function y(e,t){return e.type=="pointer"+t||e.type.toLowerCase()=="mspointer"+t}o(document).ready(function(){var t,n,i,a,r=0,s=0;"MSGesture"in window&&((p=new MSGesture).target=document.body),o(document).bind("MSGestureEnd",function(e){var t=1<e.velocityX?"Right":e.velocityX<-1?"Left":1<e.velocityY?"Down":e.velocityY<-1?"Up":null;t&&(h.el.trigger("swipe"),h.el.trigger("swipe"+t))}).on("touchstart MSPointerDown pointerdown",function(e){(a=y(e,"down"))&&!g(e)||(i=a?e:e.touches[0],e.touches&&1===e.touches.length&&h.x2&&(h.x2=void 0,h.y2=void 0),t=Date.now(),n=t-(h.last||t),h.el=o("tagName"in i.target?i.target:i.target.parentNode),l&&clearTimeout(l),h.x1=i.pageX,h.y1=i.pageY,0<n&&n<=250&&(h.isDoubleTap=!0),h.last=t,u=setTimeout(f,750),p&&a&&p.addPointer(e.pointerId))}).on("touchmove MSPointerMove pointermove",function(e){(a=y(e,"move"))&&!g(e)||(i=a?e:e.touches[0],m(),h.x2=i.pageX,h.y2=i.pageY,r+=Math.abs(h.x1-h.x2),s+=Math.abs(h.y1-h.y2))}).on("touchend MSPointerUp pointerup",function(e){(a=y(e,"up"))&&!g(e)||(m(),h.x2&&30<Math.abs(h.x1-h.x2)||h.y2&&30<Math.abs(h.y1-h.y2)?c=setTimeout(function(){var e,t,n,i;h.el&&(h.el.trigger("swipe"),h.el.trigger("swipe"+(e=h.x1,t=h.x2,n=h.y1,i=h.y2,Math.abs(e-t)>=Math.abs(n-i)?0<e-t?"Left":"Right":0<n-i?"Up":"Down"))),h={}},0):"last"in h&&(r<30&&s<30?d=setTimeout(function(){var e=o.Event("tap");e.cancelTouch=v,h.el&&h.el.trigger(e),h.isDoubleTap?(h.el&&h.el.trigger("doubleTap"),h={}):l=setTimeout(function(){l=null,h.el&&h.el.trigger("singleTap"),h={}},250)},0):h={}),r=s=0)}).on("touchcancel MSPointerCancel pointercancel",v),o(window).on("scroll",v)}),["swipe","swipeLeft","swipeRight","swipeUp","swipeDown","doubleTap","tap","singleTap","longTap"].forEach(function(t){o.fn[t]=function(e){return this.on(t,e)}})}(e)}).call(this,n(0))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,